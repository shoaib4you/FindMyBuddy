//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Gradiant0`.
    static let gradiant0 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Gradiant0")
    /// Color `Gradiant1`.
    static let gradiant1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Gradiant1")
    /// Color `green_color`.
    static let green_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_color")
    /// Color `theme_color`.
    static let theme_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "theme_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Gradiant0", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gradiant0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gradiant0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Gradiant1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gradiant1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gradiant1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "theme_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Gradiant0", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gradiant0(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gradiant0.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Gradiant1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gradiant1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gradiant1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "theme_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func theme_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.theme_color.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 32 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `JosefinSans-Bold.ttf`.
    static let josefinSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-Bold", pathExtension: "ttf")
    /// Resource file `JosefinSans-BoldItalic.ttf`.
    static let josefinSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `JosefinSans-Italic.ttf`.
    static let josefinSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-Italic", pathExtension: "ttf")
    /// Resource file `JosefinSans-Light.ttf`.
    static let josefinSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-Light", pathExtension: "ttf")
    /// Resource file `JosefinSans-LightItalic.ttf`.
    static let josefinSansLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-LightItalic", pathExtension: "ttf")
    /// Resource file `JosefinSans-Regular.ttf`.
    static let josefinSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-Regular", pathExtension: "ttf")
    /// Resource file `JosefinSans-SemiBold.ttf`.
    static let josefinSansSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-SemiBold", pathExtension: "ttf")
    /// Resource file `JosefinSans-SemiBoldItalic.ttf`.
    static let josefinSansSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `JosefinSans-Thin.ttf`.
    static let josefinSansThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-Thin", pathExtension: "ttf")
    /// Resource file `JosefinSans-ThinItalic.ttf`.
    static let josefinSansThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "JosefinSans-ThinItalic", pathExtension: "ttf")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `Poppins-Black.ttf`.
    static let poppinsBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Black", pathExtension: "ttf")
    /// Resource file `Poppins-BlackItalic.ttf`.
    static let poppinsBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BlackItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-BoldItalic.ttf`.
    static let poppinsBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBold.ttf`.
    static let poppinsExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBoldItalic.ttf`.
    static let poppinsExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLight.ttf`.
    static let poppinsExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLight", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLightItalic.ttf`.
    static let poppinsExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Italic.ttf`.
    static let poppinsItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Italic", pathExtension: "ttf")
    /// Resource file `Poppins-Light.ttf`.
    static let poppinsLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "ttf")
    /// Resource file `Poppins-LightItalic.ttf`.
    static let poppinsLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-LightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-MediumItalic.ttf`.
    static let poppinsMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-MediumItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBoldItalic.ttf`.
    static let poppinsSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Thin.ttf`.
    static let poppinsThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Thin", pathExtension: "ttf")
    /// Resource file `Poppins-ThinItalic.ttf`.
    static let poppinsThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ThinItalic", pathExtension: "ttf")
    /// Resource file `fmdb.gif`.
    static let fmdbGif = Rswift.FileResource(bundle: R.hostingBundle, name: "fmdb", pathExtension: "gif")
    /// Resource file `fmdbd.gif`.
    static let fmdbdGif = Rswift.FileResource(bundle: R.hostingBundle, name: "fmdbd", pathExtension: "gif")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-Bold", withExtension: "ttf")`
    static func josefinSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-BoldItalic", withExtension: "ttf")`
    static func josefinSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-Italic", withExtension: "ttf")`
    static func josefinSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-Light", withExtension: "ttf")`
    static func josefinSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-LightItalic", withExtension: "ttf")`
    static func josefinSansLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-Regular", withExtension: "ttf")`
    static func josefinSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-SemiBold", withExtension: "ttf")`
    static func josefinSansSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-SemiBoldItalic", withExtension: "ttf")`
    static func josefinSansSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-Thin", withExtension: "ttf")`
    static func josefinSansThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "JosefinSans-ThinItalic", withExtension: "ttf")`
    static func josefinSansThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.josefinSansThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Black", withExtension: "ttf")`
    static func poppinsBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BlackItalic", withExtension: "ttf")`
    static func poppinsBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BoldItalic", withExtension: "ttf")`
    static func poppinsBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "ttf")`
    static func poppinsExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBoldItalic", withExtension: "ttf")`
    static func poppinsExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLight", withExtension: "ttf")`
    static func poppinsExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLightItalic", withExtension: "ttf")`
    static func poppinsExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Italic", withExtension: "ttf")`
    static func poppinsItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Light", withExtension: "ttf")`
    static func poppinsLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-LightItalic", withExtension: "ttf")`
    static func poppinsLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-MediumItalic", withExtension: "ttf")`
    static func poppinsMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBoldItalic", withExtension: "ttf")`
    static func poppinsSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Thin", withExtension: "ttf")`
    static func poppinsThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ThinItalic", withExtension: "ttf")`
    static func poppinsThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fmdb", withExtension: "gif")`
    static func fmdbGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fmdbGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fmdbd", withExtension: "gif")`
    static func fmdbdGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fmdbdGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 28 fonts.
  struct font: Rswift.Validatable {
    /// Font `JosefinSans-BoldItalic`.
    static let josefinSansBoldItalic = Rswift.FontResource(fontName: "JosefinSans-BoldItalic")
    /// Font `JosefinSans-Bold`.
    static let josefinSansBold = Rswift.FontResource(fontName: "JosefinSans-Bold")
    /// Font `JosefinSans-Italic`.
    static let josefinSansItalic = Rswift.FontResource(fontName: "JosefinSans-Italic")
    /// Font `JosefinSans-LightItalic`.
    static let josefinSansLightItalic = Rswift.FontResource(fontName: "JosefinSans-LightItalic")
    /// Font `JosefinSans-Light`.
    static let josefinSansLight = Rswift.FontResource(fontName: "JosefinSans-Light")
    /// Font `JosefinSans-Regular`.
    static let josefinSansRegular = Rswift.FontResource(fontName: "JosefinSans-Regular")
    /// Font `JosefinSans-SemiBoldItalic`.
    static let josefinSansSemiBoldItalic = Rswift.FontResource(fontName: "JosefinSans-SemiBoldItalic")
    /// Font `JosefinSans-SemiBold`.
    static let josefinSansSemiBold = Rswift.FontResource(fontName: "JosefinSans-SemiBold")
    /// Font `JosefinSans-ThinItalic`.
    static let josefinSansThinItalic = Rswift.FontResource(fontName: "JosefinSans-ThinItalic")
    /// Font `JosefinSans-Thin`.
    static let josefinSansThin = Rswift.FontResource(fontName: "JosefinSans-Thin")
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")

    /// `UIFont(name: "JosefinSans-Bold", size: ...)`
    static func josefinSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansBold, size: size)
    }

    /// `UIFont(name: "JosefinSans-BoldItalic", size: ...)`
    static func josefinSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansBoldItalic, size: size)
    }

    /// `UIFont(name: "JosefinSans-Italic", size: ...)`
    static func josefinSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansItalic, size: size)
    }

    /// `UIFont(name: "JosefinSans-Light", size: ...)`
    static func josefinSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansLight, size: size)
    }

    /// `UIFont(name: "JosefinSans-LightItalic", size: ...)`
    static func josefinSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansLightItalic, size: size)
    }

    /// `UIFont(name: "JosefinSans-Regular", size: ...)`
    static func josefinSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansRegular, size: size)
    }

    /// `UIFont(name: "JosefinSans-SemiBold", size: ...)`
    static func josefinSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansSemiBold, size: size)
    }

    /// `UIFont(name: "JosefinSans-SemiBoldItalic", size: ...)`
    static func josefinSansSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "JosefinSans-Thin", size: ...)`
    static func josefinSansThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansThin, size: size)
    }

    /// `UIFont(name: "JosefinSans-ThinItalic", size: ...)`
    static func josefinSansThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: josefinSansThinItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }

    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }

    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }

    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.josefinSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-Bold' could not be loaded, is 'JosefinSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-BoldItalic' could not be loaded, is 'JosefinSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-Italic' could not be loaded, is 'JosefinSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-Light' could not be loaded, is 'JosefinSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-LightItalic' could not be loaded, is 'JosefinSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-Regular' could not be loaded, is 'JosefinSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-SemiBold' could not be loaded, is 'JosefinSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-SemiBoldItalic' could not be loaded, is 'JosefinSans-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-Thin' could not be loaded, is 'JosefinSans-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.josefinSansThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'JosefinSans-ThinItalic' could not be loaded, is 'JosefinSans-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 71 images.
  struct image {
    /// Image `David`.
    static let david = Rswift.ImageResource(bundle: R.hostingBundle, name: "David")
    /// Image `Send Icon`.
    static let sendIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Send Icon")
    /// Image `apple`.
    static let apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple")
    /// Image `back_black`.
    static let back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_black")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bell_black`.
    static let bell_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell_black")
    /// Image `black_cross`.
    static let black_cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_cross")
    /// Image `block`.
    static let block = Rswift.ImageResource(bundle: R.hostingBundle, name: "block")
    /// Image `cameraWhite`.
    static let cameraWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraWhite")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `catic`.
    static let catic = Rswift.ImageResource(bundle: R.hostingBundle, name: "catic")
    /// Image `chat_deactive`.
    static let chat_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_deactive")
    /// Image `check_box_fill_18pt`.
    static let check_box_fill_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_box_fill_18pt")
    /// Image `check_box_nill_18pt`.
    static let check_box_nill_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_box_nill_18pt")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `credit-card`.
    static let creditCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-card")
    /// Image `credit`.
    static let credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit")
    /// Image `dateic`.
    static let dateic = Rswift.ImageResource(bundle: R.hostingBundle, name: "dateic")
    /// Image `dots`.
    static let dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "dots")
    /// Image `down`.
    static let down = Rswift.ImageResource(bundle: R.hostingBundle, name: "down")
    /// Image `dummy_user`.
    static let dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_user")
    /// Image `edit_new`.
    static let edit_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_new")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `feed_active`.
    static let feed_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_active")
    /// Image `feed_deactive`.
    static let feed_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_deactive")
    /// Image `filter_ic`.
    static let filter_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ic")
    /// Image `findbuddy_deactive`.
    static let findbuddy_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_deactive")
    /// Image `fitmarket_deactive`.
    static let fitmarket_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_deactive")
    /// Image `fmdb.gif`.
    static let fmdbGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "fmdb.gif")
    /// Image `fmdbd.gif`.
    static let fmdbdGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "fmdbd.gif")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `gallery`.
    static let gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallery")
    /// Image `hidden`.
    static let hidden = Rswift.ImageResource(bundle: R.hostingBundle, name: "hidden")
    /// Image `iTunesArtwork`.
    static let iTunesArtwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "iTunesArtwork")
    /// Image `journal_activity`.
    static let journal_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "journal_activity")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `loc`.
    static let loc = Rswift.ImageResource(bundle: R.hostingBundle, name: "loc")
    /// Image `locationic`.
    static let locationic = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationic")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logooo`.
    static let logooo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logooo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `myfeed`.
    static let myfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfeed")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus1`.
    static let plus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus1")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `radio_checked`.
    static let radio_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_checked")
    /// Image `radio_unchecked`.
    static let radio_unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_unchecked")
    /// Image `referfriend`.
    static let referfriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "referfriend")
    /// Image `remove`.
    static let remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "remove")
    /// Image `sendmessage`.
    static let sendmessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendmessage")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `sharefriend`.
    static let sharefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharefriend")
    /// Image `slide_1_old`.
    static let slide_1_old = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1_old")
    /// Image `slide_1_oldd`.
    static let slide_1_oldd = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1_oldd")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `slide_4`.
    static let slide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_4")
    /// Image `subscribe`.
    static let subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribe")
    /// Image `subscription`.
    static let subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `user_icon`.
    static let user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_icon")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "David", bundle: ..., traitCollection: ...)`
    static func david(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.david, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Send Icon", bundle: ..., traitCollection: ...)`
    static func sendIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple", bundle: ..., traitCollection: ...)`
    static func apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_black", bundle: ..., traitCollection: ...)`
    static func back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell_black", bundle: ..., traitCollection: ...)`
    static func bell_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_cross", bundle: ..., traitCollection: ...)`
    static func black_cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "block", bundle: ..., traitCollection: ...)`
    static func block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.block, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cameraWhite", bundle: ..., traitCollection: ...)`
    static func cameraWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catic", bundle: ..., traitCollection: ...)`
    static func catic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_deactive", bundle: ..., traitCollection: ...)`
    static func chat_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_box_fill_18pt", bundle: ..., traitCollection: ...)`
    static func check_box_fill_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_box_fill_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_box_nill_18pt", bundle: ..., traitCollection: ...)`
    static func check_box_nill_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_box_nill_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit", bundle: ..., traitCollection: ...)`
    static func credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit-card", bundle: ..., traitCollection: ...)`
    static func creditCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dateic", bundle: ..., traitCollection: ...)`
    static func dateic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dots", bundle: ..., traitCollection: ...)`
    static func dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down", bundle: ..., traitCollection: ...)`
    static func down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummy_user", bundle: ..., traitCollection: ...)`
    static func dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_new", bundle: ..., traitCollection: ...)`
    static func edit_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_active", bundle: ..., traitCollection: ...)`
    static func feed_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_deactive", bundle: ..., traitCollection: ...)`
    static func feed_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_ic", bundle: ..., traitCollection: ...)`
    static func filter_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_deactive", bundle: ..., traitCollection: ...)`
    static func findbuddy_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_deactive", bundle: ..., traitCollection: ...)`
    static func fitmarket_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fmdb.gif", bundle: ..., traitCollection: ...)`
    static func fmdbGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fmdbGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fmdbd.gif", bundle: ..., traitCollection: ...)`
    static func fmdbdGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fmdbdGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gallery", bundle: ..., traitCollection: ...)`
    static func gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hidden", bundle: ..., traitCollection: ...)`
    static func hidden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iTunesArtwork", bundle: ..., traitCollection: ...)`
    static func iTunesArtwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iTunesArtwork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "journal_activity", bundle: ..., traitCollection: ...)`
    static func journal_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.journal_activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loc", bundle: ..., traitCollection: ...)`
    static func loc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationic", bundle: ..., traitCollection: ...)`
    static func locationic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logooo", bundle: ..., traitCollection: ...)`
    static func logooo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logooo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfeed", bundle: ..., traitCollection: ...)`
    static func myfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus1", bundle: ..., traitCollection: ...)`
    static func plus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_checked", bundle: ..., traitCollection: ...)`
    static func radio_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_unchecked", bundle: ..., traitCollection: ...)`
    static func radio_unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_unchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referfriend", bundle: ..., traitCollection: ...)`
    static func referfriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referfriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remove", bundle: ..., traitCollection: ...)`
    static func remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendmessage", bundle: ..., traitCollection: ...)`
    static func sendmessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendmessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharefriend", bundle: ..., traitCollection: ...)`
    static func sharefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1_old", bundle: ..., traitCollection: ...)`
    static func slide_1_old(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1_old, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1_oldd", bundle: ..., traitCollection: ...)`
    static func slide_1_oldd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1_oldd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_4", bundle: ..., traitCollection: ...)`
    static func slide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribe", bundle: ..., traitCollection: ...)`
    static func subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscription", bundle: ..., traitCollection: ...)`
    static func subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_icon", bundle: ..., traitCollection: ...)`
    static func user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `BlockUserCell`.
    static let blockUserCell = _R.nib._BlockUserCell()
    /// Nib `ChatListCell`.
    static let chatListCell = _R.nib._ChatListCell()
    /// Nib `FeedImageCell`.
    static let feedImageCell = _R.nib._FeedImageCell()
    /// Nib `FeedPostCell`.
    static let feedPostCell = _R.nib._FeedPostCell()
    /// Nib `FindBuddyListCell`.
    static let findBuddyListCell = _R.nib._FindBuddyListCell()
    /// Nib `ImageCell`.
    static let imageCell = _R.nib._ImageCell()
    /// Nib `JournalActivityCell`.
    static let journalActivityCell = _R.nib._JournalActivityCell()
    /// Nib `LandingCell`.
    static let landingCell = _R.nib._LandingCell()
    /// Nib `LeftSideMenuCell`.
    static let leftSideMenuCell = _R.nib._LeftSideMenuCell()
    /// Nib `MyFeedCell`.
    static let myFeedCell = _R.nib._MyFeedCell()
    /// Nib `MyFriendsCell`.
    static let myFriendsCell = _R.nib._MyFriendsCell()
    /// Nib `MyItemsCell`.
    static let myItemsCell = _R.nib._MyItemsCell()
    /// Nib `NewRequestCell`.
    static let newRequestCell = _R.nib._NewRequestCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `PlanCell`.
    static let planCell = _R.nib._PlanCell()
    /// Nib `PrimaryCell`.
    static let primaryCell = _R.nib._PrimaryCell()
    /// Nib `PublicProductsCell`.
    static let publicProductsCell = _R.nib._PublicProductsCell()
    /// Nib `ReportUserCell`.
    static let reportUserCell = _R.nib._ReportUserCell()
    /// Nib `SettingsCell`.
    static let settingsCell = _R.nib._SettingsCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BlockUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blockUserCell) instead")
    static func blockUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blockUserCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatListCell) instead")
    static func chatListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeedImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feedImageCell) instead")
    static func feedImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeedPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feedPostCell) instead")
    static func feedPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FindBuddyListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.findBuddyListCell) instead")
    static func findBuddyListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.findBuddyListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCell) instead")
    static func imageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JournalActivityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.journalActivityCell) instead")
    static func journalActivityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.journalActivityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LandingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.landingCell) instead")
    static func landingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.landingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftSideMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftSideMenuCell) instead")
    static func leftSideMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftSideMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyFeedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myFeedCell) instead")
    static func myFeedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFeedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyFriendsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myFriendsCell) instead")
    static func myFriendsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFriendsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyItemsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myItemsCell) instead")
    static func myItemsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myItemsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewRequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newRequestCell) instead")
    static func newRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newRequestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlanCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.planCell) instead")
    static func planCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.planCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PrimaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.primaryCell) instead")
    static func primaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.primaryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PublicProductsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.publicProductsCell) instead")
    static func publicProductsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.publicProductsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReportUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportUserCell) instead")
    static func reportUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportUserCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsCell) instead")
    static func settingsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsCell)
    }
    #endif

    static func blockUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockUserCell? {
      return R.nib.blockUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockUserCell
    }

    static func chatListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatListCell? {
      return R.nib.chatListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatListCell
    }

    static func feedImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedImageCell? {
      return R.nib.feedImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedImageCell
    }

    static func feedPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedPostCell? {
      return R.nib.feedPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedPostCell
    }

    static func findBuddyListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindBuddyListCell? {
      return R.nib.findBuddyListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindBuddyListCell
    }

    static func imageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
      return R.nib.imageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
    }

    static func journalActivityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JournalActivityCell? {
      return R.nib.journalActivityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JournalActivityCell
    }

    static func landingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
      return R.nib.landingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
    }

    static func leftSideMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftSideMenuCell? {
      return R.nib.leftSideMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftSideMenuCell
    }

    static func myFeedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFeedCell? {
      return R.nib.myFeedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFeedCell
    }

    static func myFriendsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFriendsCell? {
      return R.nib.myFriendsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFriendsCell
    }

    static func myItemsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyItemsCell? {
      return R.nib.myItemsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyItemsCell
    }

    static func newRequestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewRequestCell? {
      return R.nib.newRequestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewRequestCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func planCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlanCell? {
      return R.nib.planCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlanCell
    }

    static func primaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrimaryCell? {
      return R.nib.primaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrimaryCell
    }

    static func publicProductsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PublicProductsCell? {
      return R.nib.publicProductsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PublicProductsCell
    }

    static func reportUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportUserCell? {
      return R.nib.reportUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportUserCell
    }

    static func settingsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
      return R.nib.settingsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 24 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BlockUserCell`.
    static let blockUserCell: Rswift.ReuseIdentifier<BlockUserCell> = Rswift.ReuseIdentifier(identifier: "BlockUserCell")
    /// Reuse identifier `ChatImageCell`.
    static let chatImageCell: Rswift.ReuseIdentifier<ChatImageCell> = Rswift.ReuseIdentifier(identifier: "ChatImageCell")
    /// Reuse identifier `ChatListCell`.
    static let chatListCell: Rswift.ReuseIdentifier<ChatListCell> = Rswift.ReuseIdentifier(identifier: "ChatListCell")
    /// Reuse identifier `CommentsCell`.
    static let commentsCell: Rswift.ReuseIdentifier<CommentsCell> = Rswift.ReuseIdentifier(identifier: "CommentsCell")
    /// Reuse identifier `ConversationCell`.
    static let conversationCell: Rswift.ReuseIdentifier<ConversationCell> = Rswift.ReuseIdentifier(identifier: "ConversationCell")
    /// Reuse identifier `FeedImageCell`.
    static let feedImageCell: Rswift.ReuseIdentifier<FeedImageCell> = Rswift.ReuseIdentifier(identifier: "FeedImageCell")
    /// Reuse identifier `FeedPostCell`.
    static let feedPostCell: Rswift.ReuseIdentifier<FeedPostCell> = Rswift.ReuseIdentifier(identifier: "FeedPostCell")
    /// Reuse identifier `FindBuddyListCell`.
    static let findBuddyListCell: Rswift.ReuseIdentifier<FindBuddyListCell> = Rswift.ReuseIdentifier(identifier: "FindBuddyListCell")
    /// Reuse identifier `ImageCell`.
    static let imageCell: Rswift.ReuseIdentifier<ImageCell> = Rswift.ReuseIdentifier(identifier: "ImageCell")
    /// Reuse identifier `JournalActivityCell`.
    static let journalActivityCell: Rswift.ReuseIdentifier<JournalActivityCell> = Rswift.ReuseIdentifier(identifier: "JournalActivityCell")
    /// Reuse identifier `LandingCell`.
    static let landingCell: Rswift.ReuseIdentifier<LandingCell> = Rswift.ReuseIdentifier(identifier: "LandingCell")
    /// Reuse identifier `LeftSideMenuCell`.
    static let leftSideMenuCell: Rswift.ReuseIdentifier<LeftSideMenuCell> = Rswift.ReuseIdentifier(identifier: "LeftSideMenuCell")
    /// Reuse identifier `MyFeedCell`.
    static let myFeedCell: Rswift.ReuseIdentifier<MyFeedCell> = Rswift.ReuseIdentifier(identifier: "MyFeedCell")
    /// Reuse identifier `MyFriendsCell`.
    static let myFriendsCell: Rswift.ReuseIdentifier<MyFriendsCell> = Rswift.ReuseIdentifier(identifier: "MyFriendsCell")
    /// Reuse identifier `MyItemsCell`.
    static let myItemsCell: Rswift.ReuseIdentifier<MyItemsCell> = Rswift.ReuseIdentifier(identifier: "MyItemsCell")
    /// Reuse identifier `NewRequestCell`.
    static let newRequestCell: Rswift.ReuseIdentifier<NewRequestCell> = Rswift.ReuseIdentifier(identifier: "NewRequestCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `PlanCell`.
    static let planCell: Rswift.ReuseIdentifier<PlanCell> = Rswift.ReuseIdentifier(identifier: "PlanCell")
    /// Reuse identifier `PrimaryCell`.
    static let primaryCell: Rswift.ReuseIdentifier<PrimaryCell> = Rswift.ReuseIdentifier(identifier: "PrimaryCell")
    /// Reuse identifier `PublicProductsCell`.
    static let publicProductsCell: Rswift.ReuseIdentifier<PublicProductsCell> = Rswift.ReuseIdentifier(identifier: "PublicProductsCell")
    /// Reuse identifier `ReportUserCell`.
    static let reportUserCell: Rswift.ReuseIdentifier<ReportUserCell> = Rswift.ReuseIdentifier(identifier: "ReportUserCell")
    /// Reuse identifier `SettingsCell`.
    static let settingsCell: Rswift.ReuseIdentifier<SettingsCell> = Rswift.ReuseIdentifier(identifier: "SettingsCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<PhotoCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 183 localization keys.
    struct localizable {
      /// en translation: About us
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let aboutUs = Rswift.StringResource(key: "About us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Action Code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let actionCode = Rswift.StringResource(key: "Action Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Activity added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let activityAddedSuccessfully = Rswift.StringResource(key: "Activity added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Activity updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let activityUpdatedSuccessfully = Rswift.StringResource(key: "Activity updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Add Details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let addDetails = Rswift.StringResource(key: "Add Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Address Deleted successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let addressDeletedSuccessfully = Rswift.StringResource(key: "Address Deleted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Address:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let address = Rswift.StringResource(key: "Address:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Alert
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Apply Offer
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let applyOffer = Rswift.StringResource(key: "Apply Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Are you sure to delete your account?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let areYouSureToDeleteYourAccount = Rswift.StringResource(key: "Are you sure to delete your account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Are you sure you want to delete this item
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let areYouSureYouWantToDeleteThisItem = Rswift.StringResource(key: "Are you sure you want to delete this item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Are you sure you want to delete your account?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let areYouSureYouWantToDeleteYourAccount = Rswift.StringResource(key: "Are you sure you want to delete your account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let areYouSureYouWantToLogOut = Rswift.StringResource(key: "Are you sure you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Assigned Driver
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let assignedDriver = Rswift.StringResource(key: "Assigned Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Available Driver
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let availableDriver = Rswift.StringResource(key: "Available Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Blocked Users
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let blockedUsers = Rswift.StringResource(key: "Blocked Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Buddies
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let buddies = Rswift.StringResource(key: "Buddies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Buy and Sell Equipment
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let buyAndSellEquipment = Rswift.StringResource(key: "Buy and Sell Equipment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Card in invalid!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let cardInInvalid = Rswift.StringResource(key: "Card in invalid!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Card is incomplete
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let cardIsIncomplete = Rswift.StringResource(key: "Card is incomplete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let changeLanguage = Rswift.StringResource(key: "Change Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Check
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let check = Rswift.StringResource(key: "Check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Choose Language
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let chooseLanguage = Rswift.StringResource(key: "Choose Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let comment = Rswift.StringResource(key: "Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Comments
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let comments = Rswift.StringResource(key: "Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let contactUs = Rswift.StringResource(key: "Contact Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let country = Rswift.StringResource(key: "Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: DATE
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let datE = Rswift.StringResource(key: "DATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Enter email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let enterEmailAddress = Rswift.StringResource(key: "Enter email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Enter your business code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let enterYourBusinessCode = Rswift.StringResource(key: "Enter your business code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Expire on
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let expireOn = Rswift.StringResource(key: "Expire on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Feedback send successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let feedbackSendSuccessfully = Rswift.StringResource(key: "Feedback send successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Feedback sent successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let feedbackSentSuccessfully = Rswift.StringResource(key: "Feedback sent successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Find Me
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let findMe = Rswift.StringResource(key: "Find Me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Find The Perfect Workout Buddy
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let findThePerfectWorkoutBuddy = Rswift.StringResource(key: "Find The Perfect Workout Buddy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: For continue you need to accept
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let forContinueYouNeedToAccept = Rswift.StringResource(key: "For continue you need to accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: For continue you need to accept Terms and Conditions
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let forContinueYouNeedToAcceptTermsAndConditions = Rswift.StringResource(key: "For continue you need to accept Terms and Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let friends = Rswift.StringResource(key: "Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Gift
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let gift = Rswift.StringResource(key: "Gift", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Give Feedback
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let giveFeedback = Rswift.StringResource(key: "Give Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let giveRating = Rswift.StringResource(key: "Give Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Have not you recieved the code? 
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, pt-PT, es
      static let haveNotYouRecievedTheCode = Rswift.StringResource(key: "Have not you recieved the code? ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "pt-PT", "es"], comment: nil)
      /// en translation: Help & Support
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let helpSupport = Rswift.StringResource(key: "Help & Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Incorrect OTP
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let incorrectOTP = Rswift.StringResource(key: "Incorrect OTP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Incorrect code.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let incorrectCode = Rswift.StringResource(key: "Incorrect code.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Invalid Price
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let invalidPrice = Rswift.StringResource(key: "Invalid Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Invalid email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru
      static let invalidEmailAddress = Rswift.StringResource(key: "Invalid email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru"], comment: nil)
      /// en translation: Item Detail
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let itemDetail = Rswift.StringResource(key: "Item Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Journal Activity
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let journalActivity = Rswift.StringResource(key: "Journal Activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Liked by
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let likedBy = Rswift.StringResource(key: "Liked by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Load More
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let loadMore = Rswift.StringResource(key: "Load More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Members
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let members = Rswift.StringResource(key: "Members", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let menu = Rswift.StringResource(key: "Menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Mobile:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let mobile = Rswift.StringResource(key: "Mobile:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Months
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let months = Rswift.StringResource(key: "Months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myAddress = Rswift.StringResource(key: "My Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Cart
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myCart = Rswift.StringResource(key: "My Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Chat
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myChat = Rswift.StringResource(key: "My Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Earning
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myEarning = Rswift.StringResource(key: "My Earning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Earnings
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myEarnings = Rswift.StringResource(key: "My Earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Favourite
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myFavourite = Rswift.StringResource(key: "My Favourite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Feed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myFeed = Rswift.StringResource(key: "My Feed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myProfile = Rswift.StringResource(key: "My Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Reviews
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myReviews = Rswift.StringResource(key: "My Reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: My Wallet
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let myWallet = Rswift.StringResource(key: "My Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: NA
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let nA = Rswift.StringResource(key: "NA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: New password sent to your email.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let newPasswordSentToYourEmail = Rswift.StringResource(key: "New password sent to your email.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: No
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: No Internet Connection. Make sure your device is connected to the internet.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No Internet Connection. Make sure your device is connected to the internet.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: No data available to show
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let noDataAvailableToShow = Rswift.StringResource(key: "No data available to show", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Not Paid
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let notPaid = Rswift.StringResource(key: "Not Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let notification = Rswift.StringResource(key: "Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Offer
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let offer = Rswift.StringResource(key: "Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let offers = Rswift.StringResource(key: "Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orderDetails = Rswift.StringResource(key: "Order Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Order ID:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orderID = Rswift.StringResource(key: "Order ID:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Order Id:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orderId = Rswift.StringResource(key: "Order Id:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Order Now
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orderNow = Rswift.StringResource(key: "Order Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Order placed successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orderPlacedSuccessfully = Rswift.StringResource(key: "Order placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Orders
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let orders = Rswift.StringResource(key: "Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Password changed successfully
      ///
      /// Locales: zh-Hant, en, fr, de, ja, ko, pt-PT, ru, es
      static let passwordChangedSuccessfully = Rswift.StringResource(key: "Password changed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Password not matched
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let passwordNotMatched = Rswift.StringResource(key: "Password not matched", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pending = Rswift.StringResource(key: "Pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Phone Number :
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let phoneNumber = Rswift.StringResource(key: "Phone Number :", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Photos uploaded successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let photosUploadedSuccessfully = Rswift.StringResource(key: "Photos uploaded successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please Wait!!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseWait = Rswift.StringResource(key: "Please Wait!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please check terms and condition
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseCheckTermsAndCondition = Rswift.StringResource(key: "Please check terms and condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please check your email to reset
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseCheckYourEmailToReset = Rswift.StringResource(key: "Please check your email to reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please enter confirm password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterConfirmPassword = Rswift.StringResource(key: "Please enter confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please enter email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterEmailAddress = Rswift.StringResource(key: "Please enter email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please enter full name
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterFullName = Rswift.StringResource(key: "Please enter full name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please enter message
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterMessage = Rswift.StringResource(key: "Please enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please enter password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please register to continue.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseRegisterToContinue = Rswift.StringResource(key: "Please register to continue.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Please select address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseSelectAddress = Rswift.StringResource(key: "Please select address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Post added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let postAddedSuccessfully = Rswift.StringResource(key: "Post added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Post updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let postUpdatedSuccessfully = Rswift.StringResource(key: "Post updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Pre Order ID:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let preOrderID = Rswift.StringResource(key: "Pre Order ID:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Preparing
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let preparing = Rswift.StringResource(key: "Preparing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Product added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let productAddedSuccessfully = Rswift.StringResource(key: "Product added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Product updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let productUpdatedSuccessfully = Rswift.StringResource(key: "Product updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Products
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let products = Rswift.StringResource(key: "Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Profile Update Successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let profileUpdateSuccessfully = Rswift.StringResource(key: "Profile Update Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Rate this App
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let rateThisApp = Rswift.StringResource(key: "Rate this App", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Rate user and finish
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let rateUserAndFinish = Rswift.StringResource(key: "Rate user and finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Rating added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let ratingAddedSuccessfully = Rswift.StringResource(key: "Rating added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Ready
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let ready = Rswift.StringResource(key: "Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Refer Friend
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let referFriend = Rswift.StringResource(key: "Refer Friend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let rejected = Rswift.StringResource(key: "Rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Remaining time:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let remainingTime = Rswift.StringResource(key: "Remaining time:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Report
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let report = Rswift.StringResource(key: "Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Report Users
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let reportUsers = Rswift.StringResource(key: "Report Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Reported to Admin
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let reportedToAdmin = Rswift.StringResource(key: "Reported to Admin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let resend = Rswift.StringResource(key: "Resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Reset password mail has sent to your registered mailId
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let resetPasswordMailHasSentToYourRegisteredMailId = Rswift.StringResource(key: "Reset password mail has sent to your registered mailId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Restaurant
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let restaurant = Rswift.StringResource(key: "Restaurant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Restaurant Information
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let restaurantInformation = Rswift.StringResource(key: "Restaurant Information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Send Feedback
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let sendFeedback = Rswift.StringResource(key: "Send Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Send message...
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let sendMessage = Rswift.StringResource(key: "Send message...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Share APP & Earn
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let shareAPPEarn = Rswift.StringResource(key: "Share APP & Earn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Something went wrong with map
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let somethingWentWrongWithMap = Rswift.StringResource(key: "Something went wrong with map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let start = Rswift.StringResource(key: "Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Subscription
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let subscription = Rswift.StringResource(key: "Subscription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Tax Number:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let taxNumber = Rswift.StringResource(key: "Tax Number:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let termsAndConditions = Rswift.StringResource(key: "Terms and Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Thank You..!! We'll be in touch shortly.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let thankYouWeLlBeInTouchShortly = Rswift.StringResource(key: "Thank You..!! We'll be in touch shortly.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Thank you for registration..!!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let thankYouForRegistration = Rswift.StringResource(key: "Thank you for registration..!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: The offer is valid from
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let theOfferIsValidFrom = Rswift.StringResource(key: "The offer is valid from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: This is your current active plan.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let thisIsYourCurrentActivePlan = Rswift.StringResource(key: "This is your current active plan.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let time = Rswift.StringResource(key: "Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: TockenID
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let tockenID = Rswift.StringResource(key: "TockenID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Total Cart:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let totalCart = Rswift.StringResource(key: "Total Cart:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Total:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let total = Rswift.StringResource(key: "Total:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Track Order
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let trackOrder = Rswift.StringResource(key: "Track Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: TrackID
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let trackID = Rswift.StringResource(key: "TrackID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Transaction is successfull
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let transactionIsSuccessfull = Rswift.StringResource(key: "Transaction is successfull", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Update Activity
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let updateActivity = Rswift.StringResource(key: "Update Activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Update Post
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let updatePost = Rswift.StringResource(key: "Update Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Upload Your Daily Feed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let uploadYourDailyFeed = Rswift.StringResource(key: "Upload Your Daily Feed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Use Code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let useCode = Rswift.StringResource(key: "Use Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: User Already Exists
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let userAlreadyExists = Rswift.StringResource(key: "User Already Exists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: We sent your current password to your mail , please check and login again
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let weSentYourCurrentPasswordToYourMailPleaseCheckAndLoginAgain = Rswift.StringResource(key: "We sent your current password to your mail , please check and login again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Who can see your profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let whoCanSeeYourProfile = Rswift.StringResource(key: "Who can see your profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let withdrawWalletAmount = Rswift.StringResource(key: "Withdraw Wallet Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Write here...
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let writeHere = Rswift.StringResource(key: "Write here...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Write some message
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let writeSomeMessage = Rswift.StringResource(key: "Write some message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: You have entered wrong email or password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let youHaveEnteredWrongEmailOrPassword = Rswift.StringResource(key: "You have entered wrong email or password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: You must agree to our term and condition
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let youMustAgreeToOurTermAndCondition = Rswift.StringResource(key: "You must agree to our term and condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Your Fee
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let yourFee = Rswift.StringResource(key: "Your Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let yourAccountIsCreatedSuccessfullyWeHaveSentOneConfirmationMailToYourMailIdSoPleaseConfirmAndLoginInApp = Rswift.StringResource(key: "Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: Your location is hidden to other users.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let yourLocationIsHiddenToOtherUsers = Rswift.StringResource(key: "Your location is hidden to other users.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: km away
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let kmAway = Rswift.StringResource(key: "km away", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: location not found
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let locationNotFound = Rswift.StringResource(key: "location not found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: min
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let min = Rswift.StringResource(key: "min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: please enter valid details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let pleaseEnterValidDetails = Rswift.StringResource(key: "please enter valid details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: sec
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let sec = Rswift.StringResource(key: "sec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)
      /// en translation: to
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "en", "fr", "de", "it", "ja", "ko", "pt-PT", "ru", "es"], comment: nil)

      /// en translation: About us
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About us"
        }

        return NSLocalizedString("About us", bundle: bundle, comment: "")
      }

      /// en translation: Action Code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func actionCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Action Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Action Code"
        }

        return NSLocalizedString("Action Code", bundle: bundle, comment: "")
      }

      /// en translation: Activity added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func activityAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Activity added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Activity added successfully"
        }

        return NSLocalizedString("Activity added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Activity updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func activityUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Activity updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Activity updated successfully"
        }

        return NSLocalizedString("Activity updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Add Details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func addDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Details"
        }

        return NSLocalizedString("Add Details", bundle: bundle, comment: "")
      }

      /// en translation: Address Deleted successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func addressDeletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Deleted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Deleted successfully"
        }

        return NSLocalizedString("Address Deleted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Address:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address:"
        }

        return NSLocalizedString("Address:", bundle: bundle, comment: "")
      }

      /// en translation: Alert
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert"
        }

        return NSLocalizedString("Alert", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: Apply Offer
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func applyOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply Offer"
        }

        return NSLocalizedString("Apply Offer", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete your account?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func areYouSureToDeleteYourAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure to delete your account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure to delete your account?"
        }

        return NSLocalizedString("Are you sure to delete your account?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this item
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func areYouSureYouWantToDeleteThisItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete this item", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete this item"
        }

        return NSLocalizedString("Are you sure you want to delete this item", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete your account?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func areYouSureYouWantToDeleteYourAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete your account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete your account?"
        }

        return NSLocalizedString("Are you sure you want to delete your account?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func areYouSureYouWantToLogOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to log out?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to log out?"
        }

        return NSLocalizedString("Are you sure you want to log out?", bundle: bundle, comment: "")
      }

      /// en translation: Assigned Driver
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func assignedDriver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Assigned Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Assigned Driver"
        }

        return NSLocalizedString("Assigned Driver", bundle: bundle, comment: "")
      }

      /// en translation: Available Driver
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func availableDriver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Available Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Available Driver"
        }

        return NSLocalizedString("Available Driver", bundle: bundle, comment: "")
      }

      /// en translation: Blocked Users
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func blockedUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blocked Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blocked Users"
        }

        return NSLocalizedString("Blocked Users", bundle: bundle, comment: "")
      }

      /// en translation: Buddies
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func buddies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buddies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buddies"
        }

        return NSLocalizedString("Buddies", bundle: bundle, comment: "")
      }

      /// en translation: Buy and Sell Equipment
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func buyAndSellEquipment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy and Sell Equipment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy and Sell Equipment"
        }

        return NSLocalizedString("Buy and Sell Equipment", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Card in invalid!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func cardInInvalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card in invalid!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card in invalid!"
        }

        return NSLocalizedString("Card in invalid!", bundle: bundle, comment: "")
      }

      /// en translation: Card is incomplete
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func cardIsIncomplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card is incomplete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card is incomplete"
        }

        return NSLocalizedString("Card is incomplete", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func changeLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Language"
        }

        return NSLocalizedString("Change Language", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Check
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Check", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Check"
        }

        return NSLocalizedString("Check", bundle: bundle, comment: "")
      }

      /// en translation: Choose Language
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func chooseLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Language"
        }

        return NSLocalizedString("Choose Language", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comment"
        }

        return NSLocalizedString("Comment", bundle: bundle, comment: "")
      }

      /// en translation: Comments
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comments"
        }

        return NSLocalizedString("Comments", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed"
        }

        return NSLocalizedString("Completed", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func contactUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contact Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contact Us"
        }

        return NSLocalizedString("Contact Us", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Country"
        }

        return NSLocalizedString("Country", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Currency"
        }

        return NSLocalizedString("Currency", bundle: bundle, comment: "")
      }

      /// en translation: DATE
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func datE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DATE"
        }

        return NSLocalizedString("DATE", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func enterEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter email address"
        }

        return NSLocalizedString("Enter email address", bundle: bundle, comment: "")
      }

      /// en translation: Enter your business code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func enterYourBusinessCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your business code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your business code"
        }

        return NSLocalizedString("Enter your business code", bundle: bundle, comment: "")
      }

      /// en translation: Expire on
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func expireOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expire on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expire on"
        }

        return NSLocalizedString("Expire on", bundle: bundle, comment: "")
      }

      /// en translation: Feedback send successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func feedbackSendSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback send successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback send successfully"
        }

        return NSLocalizedString("Feedback send successfully", bundle: bundle, comment: "")
      }

      /// en translation: Feedback sent successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func feedbackSentSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback sent successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback sent successfully"
        }

        return NSLocalizedString("Feedback sent successfully", bundle: bundle, comment: "")
      }

      /// en translation: Find Me
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func findMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find Me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find Me"
        }

        return NSLocalizedString("Find Me", bundle: bundle, comment: "")
      }

      /// en translation: Find The Perfect Workout Buddy
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func findThePerfectWorkoutBuddy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find The Perfect Workout Buddy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find The Perfect Workout Buddy"
        }

        return NSLocalizedString("Find The Perfect Workout Buddy", bundle: bundle, comment: "")
      }

      /// en translation: For continue you need to accept
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func forContinueYouNeedToAccept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("For continue you need to accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "For continue you need to accept"
        }

        return NSLocalizedString("For continue you need to accept", bundle: bundle, comment: "")
      }

      /// en translation: For continue you need to accept Terms and Conditions
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func forContinueYouNeedToAcceptTermsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("For continue you need to accept Terms and Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "For continue you need to accept Terms and Conditions"
        }

        return NSLocalizedString("For continue you need to accept Terms and Conditions", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func friends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Friends"
        }

        return NSLocalizedString("Friends", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gift
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func gift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gift"
        }

        return NSLocalizedString("Gift", bundle: bundle, comment: "")
      }

      /// en translation: Give Feedback
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func giveFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Feedback"
        }

        return NSLocalizedString("Give Feedback", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func giveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Rating"
        }

        return NSLocalizedString("Give Rating", bundle: bundle, comment: "")
      }

      /// en translation: Have not you recieved the code? 
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, pt-PT, es
      static func haveNotYouRecievedTheCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Have not you recieved the code? ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Have not you recieved the code? "
        }

        return NSLocalizedString("Have not you recieved the code? ", bundle: bundle, comment: "")
      }

      /// en translation: Help & Support
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func helpSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help & Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help & Support"
        }

        return NSLocalizedString("Help & Support", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect OTP
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func incorrectOTP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect OTP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect OTP"
        }

        return NSLocalizedString("Incorrect OTP", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect code.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func incorrectCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect code."
        }

        return NSLocalizedString("Incorrect code.", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Price
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func invalidPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid Price"
        }

        return NSLocalizedString("Invalid Price", bundle: bundle, comment: "")
      }

      /// en translation: Invalid email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru
      static func invalidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid email address"
        }

        return NSLocalizedString("Invalid email address", bundle: bundle, comment: "")
      }

      /// en translation: Item Detail
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func itemDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Item Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Item Detail"
        }

        return NSLocalizedString("Item Detail", bundle: bundle, comment: "")
      }

      /// en translation: Journal Activity
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func journalActivity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Journal Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Journal Activity"
        }

        return NSLocalizedString("Journal Activity", bundle: bundle, comment: "")
      }

      /// en translation: Liked by
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func likedBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked by", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked by"
        }

        return NSLocalizedString("Liked by", bundle: bundle, comment: "")
      }

      /// en translation: Load More
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func loadMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Load More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Load More"
        }

        return NSLocalizedString("Load More", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Members
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func members(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Members", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Members"
        }

        return NSLocalizedString("Members", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func menu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Menu"
        }

        return NSLocalizedString("Menu", bundle: bundle, comment: "")
      }

      /// en translation: Mobile:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile:"
        }

        return NSLocalizedString("Mobile:", bundle: bundle, comment: "")
      }

      /// en translation: Months
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func months(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Months", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Months"
        }

        return NSLocalizedString("Months", bundle: bundle, comment: "")
      }

      /// en translation: My Address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Address"
        }

        return NSLocalizedString("My Address", bundle: bundle, comment: "")
      }

      /// en translation: My Cart
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Cart"
        }

        return NSLocalizedString("My Cart", bundle: bundle, comment: "")
      }

      /// en translation: My Chat
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Chat"
        }

        return NSLocalizedString("My Chat", bundle: bundle, comment: "")
      }

      /// en translation: My Earning
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myEarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Earning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Earning"
        }

        return NSLocalizedString("My Earning", bundle: bundle, comment: "")
      }

      /// en translation: My Earnings
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myEarnings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Earnings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Earnings"
        }

        return NSLocalizedString("My Earnings", bundle: bundle, comment: "")
      }

      /// en translation: My Favourite
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myFavourite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Favourite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Favourite"
        }

        return NSLocalizedString("My Favourite", bundle: bundle, comment: "")
      }

      /// en translation: My Feed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myFeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Feed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Feed"
        }

        return NSLocalizedString("My Feed", bundle: bundle, comment: "")
      }

      /// en translation: My Profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Profile"
        }

        return NSLocalizedString("My Profile", bundle: bundle, comment: "")
      }

      /// en translation: My Reviews
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myReviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Reviews"
        }

        return NSLocalizedString("My Reviews", bundle: bundle, comment: "")
      }

      /// en translation: My Wallet
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func myWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Wallet"
        }

        return NSLocalizedString("My Wallet", bundle: bundle, comment: "")
      }

      /// en translation: NA
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func nA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NA"
        }

        return NSLocalizedString("NA", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: New password sent to your email.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func newPasswordSentToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password sent to your email.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password sent to your email."
        }

        return NSLocalizedString("New password sent to your email.", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next"
        }

        return NSLocalizedString("Next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Connection. Make sure your device is connected to the internet.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Connection. Make sure your device is connected to the internet."
        }

        return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet.", bundle: bundle, comment: "")
      }

      /// en translation: No data available to show
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func noDataAvailableToShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No data available to show", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No data available to show"
        }

        return NSLocalizedString("No data available to show", bundle: bundle, comment: "")
      }

      /// en translation: Not Paid
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func notPaid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not Paid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not Paid"
        }

        return NSLocalizedString("Not Paid", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification"
        }

        return NSLocalizedString("Notification", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Offer
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func offer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offer"
        }

        return NSLocalizedString("Offer", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offers"
        }

        return NSLocalizedString("Offers", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orderDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Details"
        }

        return NSLocalizedString("Order Details", bundle: bundle, comment: "")
      }

      /// en translation: Order ID:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orderID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order ID:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order ID:"
        }

        return NSLocalizedString("Order ID:", bundle: bundle, comment: "")
      }

      /// en translation: Order Id:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orderId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Id:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Id:"
        }

        return NSLocalizedString("Order Id:", bundle: bundle, comment: "")
      }

      /// en translation: Order Now
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orderNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Now"
        }

        return NSLocalizedString("Order Now", bundle: bundle, comment: "")
      }

      /// en translation: Order placed successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orderPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order placed successfully"
        }

        return NSLocalizedString("Order placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Orders
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Orders"
        }

        return NSLocalizedString("Orders", bundle: bundle, comment: "")
      }

      /// en translation: Password changed successfully
      ///
      /// Locales: zh-Hant, en, fr, de, ja, ko, pt-PT, ru, es
      static func passwordChangedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password changed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password changed successfully"
        }

        return NSLocalizedString("Password changed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Password not matched
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func passwordNotMatched(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password not matched", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password not matched"
        }

        return NSLocalizedString("Password not matched", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pending"
        }

        return NSLocalizedString("Pending", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number :
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone Number :", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone Number :"
        }

        return NSLocalizedString("Phone Number :", bundle: bundle, comment: "")
      }

      /// en translation: Photos uploaded successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func photosUploadedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Photos uploaded successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Photos uploaded successfully"
        }

        return NSLocalizedString("Photos uploaded successfully", bundle: bundle, comment: "")
      }

      /// en translation: Please Wait!!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Wait!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Wait!!"
        }

        return NSLocalizedString("Please Wait!!", bundle: bundle, comment: "")
      }

      /// en translation: Please check terms and condition
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseCheckTermsAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check terms and condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check terms and condition"
        }

        return NSLocalizedString("Please check terms and condition", bundle: bundle, comment: "")
      }

      /// en translation: Please check your email to reset
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseCheckYourEmailToReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check your email to reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check your email to reset"
        }

        return NSLocalizedString("Please check your email to reset", bundle: bundle, comment: "")
      }

      /// en translation: Please enter confirm password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter confirm password"
        }

        return NSLocalizedString("Please enter confirm password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter email address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter email address"
        }

        return NSLocalizedString("Please enter email address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter full name
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterFullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter full name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter full name"
        }

        return NSLocalizedString("Please enter full name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter message
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter message"
        }

        return NSLocalizedString("Please enter message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter password"
        }

        return NSLocalizedString("Please enter password", bundle: bundle, comment: "")
      }

      /// en translation: Please register to continue.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseRegisterToContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please register to continue.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please register to continue."
        }

        return NSLocalizedString("Please register to continue.", bundle: bundle, comment: "")
      }

      /// en translation: Please select address
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseSelectAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select address"
        }

        return NSLocalizedString("Please select address", bundle: bundle, comment: "")
      }

      /// en translation: Post added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func postAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post added successfully"
        }

        return NSLocalizedString("Post added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Post updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func postUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post updated successfully"
        }

        return NSLocalizedString("Post updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Pre Order ID:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func preOrderID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pre Order ID:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pre Order ID:"
        }

        return NSLocalizedString("Pre Order ID:", bundle: bundle, comment: "")
      }

      /// en translation: Preparing
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func preparing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Preparing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Preparing"
        }

        return NSLocalizedString("Preparing", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Product added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func productAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product added successfully"
        }

        return NSLocalizedString("Product added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Product updated successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func productUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product updated successfully"
        }

        return NSLocalizedString("Product updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Products
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func products(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Products"
        }

        return NSLocalizedString("Products", bundle: bundle, comment: "")
      }

      /// en translation: Profile Update Successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func profileUpdateSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile Update Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile Update Successfully"
        }

        return NSLocalizedString("Profile Update Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Rate this App
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func rateThisApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate this App", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate this App"
        }

        return NSLocalizedString("Rate this App", bundle: bundle, comment: "")
      }

      /// en translation: Rate user and finish
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func rateUserAndFinish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate user and finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate user and finish"
        }

        return NSLocalizedString("Rate user and finish", bundle: bundle, comment: "")
      }

      /// en translation: Rating added successfully
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func ratingAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating added successfully"
        }

        return NSLocalizedString("Rating added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Ready
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ready"
        }

        return NSLocalizedString("Ready", bundle: bundle, comment: "")
      }

      /// en translation: Refer Friend
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func referFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Refer Friend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Refer Friend"
        }

        return NSLocalizedString("Refer Friend", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func rejected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rejected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rejected"
        }

        return NSLocalizedString("Rejected", bundle: bundle, comment: "")
      }

      /// en translation: Remaining time:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func remainingTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remaining time:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remaining time:"
        }

        return NSLocalizedString("Remaining time:", bundle: bundle, comment: "")
      }

      /// en translation: Report
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report"
        }

        return NSLocalizedString("Report", bundle: bundle, comment: "")
      }

      /// en translation: Report Users
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func reportUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report Users"
        }

        return NSLocalizedString("Report Users", bundle: bundle, comment: "")
      }

      /// en translation: Reported to Admin
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func reportedToAdmin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reported to Admin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reported to Admin"
        }

        return NSLocalizedString("Reported to Admin", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Resend"
        }

        return NSLocalizedString("Resend", bundle: bundle, comment: "")
      }

      /// en translation: Reset password mail has sent to your registered mailId
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func resetPasswordMailHasSentToYourRegisteredMailId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reset password mail has sent to your registered mailId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reset password mail has sent to your registered mailId"
        }

        return NSLocalizedString("Reset password mail has sent to your registered mailId", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func restaurant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurant"
        }

        return NSLocalizedString("Restaurant", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant Information
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func restaurantInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurant Information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurant Information"
        }

        return NSLocalizedString("Restaurant Information", bundle: bundle, comment: "")
      }

      /// en translation: Send Feedback
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func sendFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send Feedback"
        }

        return NSLocalizedString("Send Feedback", bundle: bundle, comment: "")
      }

      /// en translation: Send message...
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func sendMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send message...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send message..."
        }

        return NSLocalizedString("Send message...", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share APP & Earn
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func shareAPPEarn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share APP & Earn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share APP & Earn"
        }

        return NSLocalizedString("Share APP & Earn", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign up"
        }

        return NSLocalizedString("Sign up", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Skip"
        }

        return NSLocalizedString("Skip", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong"
        }

        return NSLocalizedString("Something went wrong", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong with map
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func somethingWentWrongWithMap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong with map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong with map"
        }

        return NSLocalizedString("Something went wrong with map", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start"
        }

        return NSLocalizedString("Start", bundle: bundle, comment: "")
      }

      /// en translation: Subscription
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func subscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Subscription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Subscription"
        }

        return NSLocalizedString("Subscription", bundle: bundle, comment: "")
      }

      /// en translation: Tax Number:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func taxNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tax Number:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tax Number:"
        }

        return NSLocalizedString("Tax Number:", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func termsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and Conditions"
        }

        return NSLocalizedString("Terms and Conditions", bundle: bundle, comment: "")
      }

      /// en translation: Thank You..!! We'll be in touch shortly.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func thankYouWeLlBeInTouchShortly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thank You..!! We'll be in touch shortly.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thank You..!! We'll be in touch shortly."
        }

        return NSLocalizedString("Thank You..!! We'll be in touch shortly.", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for registration..!!
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func thankYouForRegistration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thank you for registration..!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thank you for registration..!!"
        }

        return NSLocalizedString("Thank you for registration..!!", bundle: bundle, comment: "")
      }

      /// en translation: The offer is valid from
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func theOfferIsValidFrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The offer is valid from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The offer is valid from"
        }

        return NSLocalizedString("The offer is valid from", bundle: bundle, comment: "")
      }

      /// en translation: This is your current active plan.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func thisIsYourCurrentActivePlan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is your current active plan.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is your current active plan."
        }

        return NSLocalizedString("This is your current active plan.", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time"
        }

        return NSLocalizedString("Time", bundle: bundle, comment: "")
      }

      /// en translation: TockenID
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func tockenID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TockenID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TockenID"
        }

        return NSLocalizedString("TockenID", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func totalCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Cart:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Cart:"
        }

        return NSLocalizedString("Total Cart:", bundle: bundle, comment: "")
      }

      /// en translation: Total:
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total:"
        }

        return NSLocalizedString("Total:", bundle: bundle, comment: "")
      }

      /// en translation: Track Order
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func trackOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Track Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Track Order"
        }

        return NSLocalizedString("Track Order", bundle: bundle, comment: "")
      }

      /// en translation: TrackID
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func trackID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TrackID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TrackID"
        }

        return NSLocalizedString("TrackID", bundle: bundle, comment: "")
      }

      /// en translation: Transaction is successfull
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func transactionIsSuccessfull(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Transaction is successfull", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Transaction is successfull"
        }

        return NSLocalizedString("Transaction is successfull", bundle: bundle, comment: "")
      }

      /// en translation: Update Activity
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func updateActivity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Activity"
        }

        return NSLocalizedString("Update Activity", bundle: bundle, comment: "")
      }

      /// en translation: Update Post
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func updatePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Post"
        }

        return NSLocalizedString("Update Post", bundle: bundle, comment: "")
      }

      /// en translation: Upload Your Daily Feed
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func uploadYourDailyFeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upload Your Daily Feed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upload Your Daily Feed"
        }

        return NSLocalizedString("Upload Your Daily Feed", bundle: bundle, comment: "")
      }

      /// en translation: Use Code
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func useCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use Code"
        }

        return NSLocalizedString("Use Code", bundle: bundle, comment: "")
      }

      /// en translation: User Already Exists
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func userAlreadyExists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Already Exists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Already Exists"
        }

        return NSLocalizedString("User Already Exists", bundle: bundle, comment: "")
      }

      /// en translation: We sent your current password to your mail , please check and login again
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func weSentYourCurrentPasswordToYourMailPleaseCheckAndLoginAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We sent your current password to your mail , please check and login again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We sent your current password to your mail , please check and login again"
        }

        return NSLocalizedString("We sent your current password to your mail , please check and login again", bundle: bundle, comment: "")
      }

      /// en translation: Who can see your profile
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func whoCanSeeYourProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can see your profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can see your profile"
        }

        return NSLocalizedString("Who can see your profile", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func withdrawWalletAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdraw Wallet Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdraw Wallet Amount"
        }

        return NSLocalizedString("Withdraw Wallet Amount", bundle: bundle, comment: "")
      }

      /// en translation: Write here...
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func writeHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write here...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write here..."
        }

        return NSLocalizedString("Write here...", bundle: bundle, comment: "")
      }

      /// en translation: Write some message
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func writeSomeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write some message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write some message"
        }

        return NSLocalizedString("Write some message", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You have entered wrong email or password
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func youHaveEnteredWrongEmailOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have entered wrong email or password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have entered wrong email or password"
        }

        return NSLocalizedString("You have entered wrong email or password", bundle: bundle, comment: "")
      }

      /// en translation: You must agree to our term and condition
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func youMustAgreeToOurTermAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You must agree to our term and condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You must agree to our term and condition"
        }

        return NSLocalizedString("You must agree to our term and condition", bundle: bundle, comment: "")
      }

      /// en translation: Your Fee
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func yourFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Fee"
        }

        return NSLocalizedString("Your Fee", bundle: bundle, comment: "")
      }

      /// en translation: Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func yourAccountIsCreatedSuccessfullyWeHaveSentOneConfirmationMailToYourMailIdSoPleaseConfirmAndLoginInApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app."
        }

        return NSLocalizedString("Your account is created successfully, we have sent one confirmation mail to your mail id so please confirm and login in app.", bundle: bundle, comment: "")
      }

      /// en translation: Your location is hidden to other users.
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func yourLocationIsHiddenToOtherUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your location is hidden to other users.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your location is hidden to other users."
        }

        return NSLocalizedString("Your location is hidden to other users.", bundle: bundle, comment: "")
      }

      /// en translation: km away
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func kmAway(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("km away", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "km away"
        }

        return NSLocalizedString("km away", bundle: bundle, comment: "")
      }

      /// en translation: location not found
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func locationNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location not found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location not found"
        }

        return NSLocalizedString("location not found", bundle: bundle, comment: "")
      }

      /// en translation: min
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "min"
        }

        return NSLocalizedString("min", bundle: bundle, comment: "")
      }

      /// en translation: please enter valid details
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func pleaseEnterValidDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please enter valid details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please enter valid details"
        }

        return NSLocalizedString("please enter valid details", bundle: bundle, comment: "")
      }

      /// en translation: sec
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func sec(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sec", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sec"
        }

        return NSLocalizedString("sec", bundle: bundle, comment: "")
      }

      /// en translation: to
      ///
      /// Locales: zh-Hant, en, fr, de, it, ja, ko, pt-PT, ru, es
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 196 localization keys.
    struct main {
      /// en translation: ADD PHOTOS
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let eVqFfMMFNormalTitle = Rswift.StringResource(key: "eVq-Ff-MMF.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: AED 52.26
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wm1HPMHHText = Rswift.StringResource(key: "wm1-HP-MHH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let t3d8j9HAPlaceholder = Rswift.StringResource(key: "t3d-8j-9HA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let z4PTFIText = Rswift.StringResource(key: "18Z-4P-tFI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Activity Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let pi0Ky2mAPlaceholder = Rswift.StringResource(key: "PI0-ky-2mA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Activity Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let v5bSfIqAText = Rswift.StringResource(key: "v5b-Sf-IqA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Activity
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sjLDDCVxText = Rswift.StringResource(key: "SjL-DD-cVx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let s5wApJZrNormalTitle = Rswift.StringResource(key: "S5w-Ap-JZr.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Images
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qcZmKjeText = Rswift.StringResource(key: "5Qc-Zm-Kje.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Images
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let t5ZZyQs1Text = Rswift.StringResource(key: "t5Z-zy-qs1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hMHQLXrText = Rswift.StringResource(key: "8hM-hQ-LXr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Add Post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let pYk7HJwgText = Rswift.StringResource(key: "PYk-7H-jwg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Address Bar
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cGPDt0A9Text = Rswift.StringResource(key: "cGP-dt-0A9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Already have an account? Sign In
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let iIxFhB7TNormalTitle = Rswift.StringResource(key: "IIx-Fh-b7T.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Block
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let v0J6SNormalTitle = Rswift.StringResource(key: "967-v0-J6S.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let kHj0F1D4NormalTitle = Rswift.StringResource(key: "KHj-0F-1D4.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let mZDaS3BNormalTitle = Rswift.StringResource(key: "6mZ-da-s3B.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wrjIuUc3ConfigurationTitle = Rswift.StringResource(key: "WRJ-iu-uc3.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wrjIuUc3NormalTitle = Rswift.StringResource(key: "WRJ-iu-uc3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let uAQXEGQwNormalTitle = Rswift.StringResource(key: "uAQ-xE-gQw.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let l2U9ViText = Rswift.StringResource(key: "73L-2U-9Vi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let mkfckJspText = Rswift.StringResource(key: "MKF-cK-Jsp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let uMvKeA7GNormalTitle = Rswift.StringResource(key: "UMv-ke-A7G.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let z2CXVWiText = Rswift.StringResource(key: "4z2-cX-VWi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let z8hYBBNlText = Rswift.StringResource(key: "z8h-yB-BNl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let dnJQcI5bNormalTitle = Rswift.StringResource(key: "DnJ-Qc-I5b.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cCn89WT8Text = Rswift.StringResource(key: "CCn-89-WT8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hwvC7PZaTitle = Rswift.StringResource(key: "hwv-c7-pZa.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Chinese
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tj2Md7y5NormalTitle = Rswift.StringResource(key: "Tj2-Md-7y5.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let nGgMkBybPlaceholder = Rswift.StringResource(key: "NGg-Mk-byb.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tDeQjIHXPlaceholder = Rswift.StringResource(key: "tDe-qj-iHX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Contact Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let i7oHWNEgPlaceholder = Rswift.StringResource(key: "i7o-hW-nEg.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Contact Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wxc5JVq5Placeholder = Rswift.StringResource(key: "wxc-5J-vq5.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Contact Seller
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let mqpjzpmdText = Rswift.StringResource(key: "MQP-JZ-PMD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let jIiTqRBPText = Rswift.StringResource(key: "JIi-tq-rBP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Continue with google
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let zp90fJ0jNormalTitle = Rswift.StringResource(key: "ZP9-0f-j0j.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Create new account
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let nupSbKDuText = Rswift.StringResource(key: "Nup-sb-kDu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let fTDOVA6rNormalTitle = Rswift.StringResource(key: "fTD-OV-A6r.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ix3tErKText = Rswift.StringResource(key: "0Ix-3t-ErK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let bRSDsbText = Rswift.StringResource(key: "30b-RS-Dsb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let c5JPeHAyText = Rswift.StringResource(key: "c5J-Pe-HAy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let e7zWy1BoText = Rswift.StringResource(key: "e7z-wy-1Bo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ffLEcCwgText = Rswift.StringResource(key: "ffL-ec-Cwg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hPyMAQaLText = Rswift.StringResource(key: "hPy-mA-QaL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let jXxLxQText = Rswift.StringResource(key: "21J-xx-LxQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let p7UUL99WPlaceholder = Rswift.StringResource(key: "P7U-UL-99W.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let pdPEmFD2Placeholder = Rswift.StringResource(key: "pdP-Em-fD2.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tH4Re2UzText = Rswift.StringResource(key: "tH4-re-2Uz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tjI7vZ2rText = Rswift.StringResource(key: "TjI-7v-Z2r.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Don't have an account? Sign Up
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rCAW2JiNNormalTitle = Rswift.StringResource(key: "rCA-W2-jiN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qbIGL3hText = Rswift.StringResource(key: "8qb-iG-L3h.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ag1MzR0cText = Rswift.StringResource(key: "ag1-Mz-r0c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let agFELF0YPlaceholder = Rswift.StringResource(key: "AgF-EL-F0Y.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let iRyB5W7VPlaceholder = Rswift.StringResource(key: "iRy-B5-w7V.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let pvcA16vzPlaceholder = Rswift.StringResource(key: "Pvc-A1-6vz.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sb9PcO5oPlaceholder = Rswift.StringResource(key: "SB9-pc-o5o.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tXtVeXUFPlaceholder = Rswift.StringResource(key: "TXt-Ve-XUF.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let y9BZqQSmPlaceholder = Rswift.StringResource(key: "Y9B-zq-qSm.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let r44TKOEBNormalTitle = Rswift.StringResource(key: "r44-TK-oEB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter Radius (Range in miles)
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let a6uF0cText = Rswift.StringResource(key: "48A-6u-f0c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter Radius (Range in miles)
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cknrnDxjPlaceholder = Rswift.StringResource(key: "CKN-rN-dxj.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter card number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let t3XTkKKcPlaceholder = Rswift.StringResource(key: "t3X-Tk-KKc.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter expiry date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let elqGosPlaceholder = Rswift.StringResource(key: "04E-LQ-gos.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter name on card
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cehG1JQaPlaceholder = Rswift.StringResource(key: "ceh-g1-JQa.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter security code
      ///
      /// Locales: fr, es, ru, de, ko, pt-PT, zh-Hant, ja, en
      static let xIXXECIYPlaceholder = Rswift.StringResource(key: "xIX-XE-cIY.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wuUlEUoText = Rswift.StringResource(key: "9wu-Ul-EUo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Everyone
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let etL7tFhtNormalTitle = Rswift.StringResource(key: "EtL-7t-fht.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Expiry Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rSpDDPdhText = Rswift.StringResource(key: "RSp-dD-pdh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qPYGkN6tText = Rswift.StringResource(key: "qPY-gk-N6t.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Feedback*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let uAgQoN7tPlaceholder = Rswift.StringResource(key: "UAg-qo-N7t.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let g8b0b6YbNormalTitle = Rswift.StringResource(key: "G8b-0b-6Yb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Find Buddy
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let fzKXRYzETitle = Rswift.StringResource(key: "FzK-XR-yzE.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let h2VGFCzsPlaceholder = Rswift.StringResource(key: "h2V-gF-Czs.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ztZ3MNPXPlaceholder = Rswift.StringResource(key: "ztZ-3M-nPX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let okY6pV6mText = Rswift.StringResource(key: "okY-6p-v6m.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Fit Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let f7OPcGl8Title = Rswift.StringResource(key: "f7O-Pc-Gl8.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Fit Market
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let plr45GATitle = Rswift.StringResource(key: "8PL-R4-5GA.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wauFr3tnText = Rswift.StringResource(key: "Wau-fr-3tn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let svGyF5PNormalTitle = Rswift.StringResource(key: "4SV-Gy-f5P.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: French
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tzIJFLSINormalTitle = Rswift.StringResource(key: "TzI-jF-lSI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let bwnPoLHCText = Rswift.StringResource(key: "BWN-Po-LHC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let f5VIe4hCText = Rswift.StringResource(key: "f5V-ie-4hC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rlsHlFY0NormalTitle = Rswift.StringResource(key: "Rls-Hl-FY0.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let xwWFPXHHText = Rswift.StringResource(key: "xwW-fP-xHH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: From Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let h8iL2NuLText = Rswift.StringResource(key: "h8i-L2-nuL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: From Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let uYXRnGYcNormalTitle = Rswift.StringResource(key: "uYX-Rn-gYc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: German
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let yvmGCNSGNormalTitle = Rswift.StringResource(key: "Yvm-gC-NSG.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Get Started with FMWB Pro
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wLjVSQwvText = Rswift.StringResource(key: "wLj-vS-Qwv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: I Agree, Continue
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lda8eCL2NormalTitle = Rswift.StringResource(key: "lda-8e-CL2.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Invite
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tVXUIN7hNormalTitle = Rswift.StringResource(key: "tVX-UI-n7h.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Italian
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let htvKjBYxNormalTitle = Rswift.StringResource(key: "htv-Kj-bYx.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Japanese
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let oaxM1KVNNormalTitle = Rswift.StringResource(key: "Oax-M1-kVN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Journal Activity
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let othG8DlsText = Rswift.StringResource(key: "oth-G8-dls.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Korean
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let vwZzDd9NormalTitle = Rswift.StringResource(key: "4VW-Zz-Dd9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Kundan
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let mZlIz5l2Text = Rswift.StringResource(key: "MZl-iz-5l2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let j19FGH4pNormalTitle = Rswift.StringResource(key: "J19-FG-h4p.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let aYuPSPEYText = Rswift.StringResource(key: "aYu-PS-PEY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let mRaIAReEText = Rswift.StringResource(key: "mRa-iA-reE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let me7RYXyText = Rswift.StringResource(key: "4me-7R-yXy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let q0iNiWfIText = Rswift.StringResource(key: "Q0i-Ni-WfI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sd0E2RnyText = Rswift.StringResource(key: "sd0-e2-rny.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let t9OEHSMiText = Rswift.StringResource(key: "T9O-eH-sMi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wfEKwD8VText = Rswift.StringResource(key: "wfE-kw-d8V.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let yRgHjYDsText = Rswift.StringResource(key: "yRg-hj-YDs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let eUpZj0WXPlaceholder = Rswift.StringResource(key: "eUp-zj-0WX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let faoYlIwRPlaceholder = Rswift.StringResource(key: "Fao-Yl-IwR.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let w0y4fHOdText = Rswift.StringResource(key: "W0y-4f-HOd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: List
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rve7YD1eNormalTitle = Rswift.StringResource(key: "RVE-7Y-d1e.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ctbaxhvText = Rswift.StringResource(key: "6CT-bA-XHV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let fkM7gNfcPlaceholder = Rswift.StringResource(key: "fkM-7g-nfc.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let khtkxYdlText = Rswift.StringResource(key: "KHT-KX-ydl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lLjSfNoAPlaceholder = Rswift.StringResource(key: "LLj-sf-noA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ywCI54PJPlaceholder = Rswift.StringResource(key: "YwC-I5-4PJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location Zip Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let dkIWq2g8Text = Rswift.StringResource(key: "dkI-Wq-2g8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Location Zip Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ynxwzCcHPlaceholder = Rswift.StringResource(key: "YNX-wZ-ccH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Login to your account
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let eJbXN1iTText = Rswift.StringResource(key: "EJb-XN-1iT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Map
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let bc1UJExINormalTitle = Rswift.StringResource(key: "bc1-uJ-exI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hSTAMLXaNormalTitle = Rswift.StringResource(key: "hST-aM-lXa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tBH553Placeholder = Rswift.StringResource(key: "28t-BH-553.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tMUCzGPrPlaceholder = Rswift.StringResource(key: "tMU-Cz-GPr.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let uGpKpXPlaceholder = Rswift.StringResource(key: "75U-Gp-KpX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let vC3R3EeLText = Rswift.StringResource(key: "vC3-R3-eeL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: My Buddies
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let nqxPe0efNormalTitle = Rswift.StringResource(key: "nqx-Pe-0ef.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: My Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let z6BDbT4vText = Rswift.StringResource(key: "z6B-db-T4v.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: My Items
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rd15KPoeNormalTitle = Rswift.StringResource(key: "Rd1-5K-Poe.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Name On Card
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wqDQPGVFText = Rswift.StringResource(key: "WqD-QP-gVF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Name change can only be changed once every six months.
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sMuMoeText = Rswift.StringResource(key: "86S-Mu-moe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Name*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let izl3y1wdPlaceholder = Rswift.StringResource(key: "IZL-3y-1wd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Name*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let xzIRyQlZPlaceholder = Rswift.StringResource(key: "XzI-Ry-qlZ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lrxoq5dAPlaceholder = Rswift.StringResource(key: "LRX-OQ-5dA.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Notification Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let xkyJmU7EText = Rswift.StringResource(key: "Xky-Jm-u7E.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sEyJQOHJPlaceholder = Rswift.StringResource(key: "sEy-jQ-OHJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: POST
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let dkIVAczNormalTitle = Rswift.StringResource(key: "9Dk-iV-acz.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: POST
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let vqHrTjbNormalTitle = Rswift.StringResource(key: "1VQ-hr-tjb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cfXLW7HHPlaceholder = Rswift.StringResource(key: "CfX-lW-7HH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hiG0TkfPlaceholder = Rswift.StringResource(key: "2hi-G0-Tkf.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Payment Amount
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let oeweCdXText = Rswift.StringResource(key: "1OE-WE-CdX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Photos
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let kdLZ9NIxText = Rswift.StringResource(key: "kdL-Z9-nIx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Portuguese
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lu5CnBQbNormalTitle = Rswift.StringResource(key: "Lu5-Cn-BQb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Posts
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wMeBFIdsText = Rswift.StringResource(key: "wMe-BF-ids.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Posts
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let xopPROsRText = Rswift.StringResource(key: "Xop-PR-osR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Product Detail
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ppBXITLdText = Rswift.StringResource(key: "ppB-XI-TLd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Product Price
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ea1JsLwwPlaceholder = Rswift.StringResource(key: "EA1-js-Lww.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Product Price
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let vzHIEJ4Text = Rswift.StringResource(key: "6Vz-HI-EJ4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, en
      static let km3ON2ouTitle = Rswift.StringResource(key: "km3-oN-2ou.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let eD8ZcI8wText = Rswift.StringResource(key: "eD8-Zc-i8w.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Public Products
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let p6JNTPEbNormalTitle = Rswift.StringResource(key: "p6J-NT-PEb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: REGISTER
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let vceGERZ4NormalTitle = Rswift.StringResource(key: "Vce-GE-RZ4.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Refer a Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let chG8cLXBText = Rswift.StringResource(key: "chG-8c-LXB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Refer a Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let n3pY3Ne7Text = Rswift.StringResource(key: "n3p-Y3-ne7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Report
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let o8gLq8CONormalTitle = Rswift.StringResource(key: "o8g-lq-8CO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Requests
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let iCOgX5GNormalTitle = Rswift.StringResource(key: "4iC-og-X5G.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Russian
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cCm1ERrbNormalTitle = Rswift.StringResource(key: "CCm-1E-rrb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let id3XBMbtNormalTitle = Rswift.StringResource(key: "Id3-xB-Mbt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let jHgHLWhhNormalTitle = Rswift.StringResource(key: "JHg-hL-Whh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let iIBO0RPPText = Rswift.StringResource(key: "iIB-o0-RPP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Security Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let yq2ZVG2FText = Rswift.StringResource(key: "YQ2-ZV-G2F.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Select Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qZlY4LxhNormalTitle = Rswift.StringResource(key: "QZl-Y4-lxh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let yuiIvE6xText = Rswift.StringResource(key: "Yui-iv-E6x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Select Who Can See Your Profile?
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let aTxEMERkText = Rswift.StringResource(key: "ATx-eM-ERk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let gOXN69kzNormalTitle = Rswift.StringResource(key: "gOX-n6-9kz.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hXYMk2YKNormalTitle = Rswift.StringResource(key: "hXY-Mk-2YK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let oQnEFTbeNormalTitle = Rswift.StringResource(key: "OQn-eF-tbe.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send Feedback
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let giiupfQpText = Rswift.StringResource(key: "GII-uP-FQp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send message...
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let p5KIVVQ2Text = Rswift.StringResource(key: "P5K-IV-vQ2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Send message...
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qUkP6NOgText = Rswift.StringResource(key: "qUk-p6-NOg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lXGHz845Text = Rswift.StringResource(key: "lXG-Hz-845.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Share my location to other users
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let dk3XrMzuText = Rswift.StringResource(key: "DK3-Xr-Mzu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Sign in with Apple
      ///
      /// Locales: fr, es, ru, de, it, pt-PT, zh-Hant, ja, en
      static let iuBHnOdKNormalTitle = Rswift.StringResource(key: "IuB-hn-OdK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let aZR9MJUvNormalTitle = Rswift.StringResource(key: "aZR-9M-JUv.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Spanish
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cNZf7o7NormalTitle = Rswift.StringResource(key: "2cN-zf-7o7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let o2UAcXUaNormalTitle = Rswift.StringResource(key: "O2U-Ac-xUa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qsQpLnkNormalTitle = Rswift.StringResource(key: "0Qs-qp-lnk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Subscribe
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let dly4h3DKNormalTitle = Rswift.StringResource(key: "DLY-4h-3DK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Subscribe to the following plans below to further enjoy what the app has to offer
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let b92YwZjCText = Rswift.StringResource(key: "b92-yw-zjC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Subscription
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rn1Q4YEYText = Rswift.StringResource(key: "rn1-q4-yEY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let cKpG3EnPText = Rswift.StringResource(key: "CKp-g3-enP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let gVLwWkpText = Rswift.StringResource(key: "7gV-lw-Wkp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let gqd4fSQLText = Rswift.StringResource(key: "Gqd-4f-SQL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let robNOTJbText = Rswift.StringResource(key: "Rob-NO-tJb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let wb4XeNLTText = Rswift.StringResource(key: "wb4-xe-nLT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let lJdVAVscText = Rswift.StringResource(key: "LJd-VA-vsc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let tVJDw6evPlaceholder = Rswift.StringResource(key: "tVJ-Dw-6ev.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: To Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let hWtNUUMFNormalTitle = Rswift.StringResource(key: "hWt-NU-UMF.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: To Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let o8uWe2R8Text = Rswift.StringResource(key: "o8u-we-2R8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: UPDATE
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let a9TOBVsfNormalTitle = Rswift.StringResource(key: "A9T-oB-vsf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: UPLOAD PHOTOS
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rJAFiX43NormalTitle = Rswift.StringResource(key: "rJA-Fi-X43.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let naXOQTQEText = Rswift.StringResource(key: "NaX-OQ-TQE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: When you become a paid menber. 50% off the next month.
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rc8P2JQkText = Rswift.StringResource(key: "rc8-p2-JQk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Write a post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let ondHfYpwText = Rswift.StringResource(key: "OND-hf-ypw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Write a post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let qPn0uNDJPlaceholder = Rswift.StringResource(key: "qPn-0u-nDJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Zip/Postal Code Address
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let aJSYIG7BPlaceholder = Rswift.StringResource(key: "aJS-YI-G7B.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: Zip/Postal Code Address
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let sRaOL9GTText = Rswift.StringResource(key: "SRa-oL-9GT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: dfds
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let gTiDXNzfTitle = Rswift.StringResource(key: "GTi-dX-Nzf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: ldsf sdfads
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let kd4PUIEEText = Rswift.StringResource(key: "Kd4-PU-IEE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)
      /// en translation: ldsf sdfads
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static let rvtJwLY0Text = Rswift.StringResource(key: "rvt-Jw-lY0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "es", "ru", "de", "ko", "it", "pt-PT", "zh-Hant", "ja", "en"], comment: nil)

      /// en translation: ADD PHOTOS
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func eVqFfMMFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eVq-Ff-MMF.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eVq-Ff-MMF.normalTitle"
        }

        return NSLocalizedString("eVq-Ff-MMF.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: AED 52.26
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wm1HPMHHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wm1-HP-MHH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wm1-HP-MHH.text"
        }

        return NSLocalizedString("wm1-HP-MHH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func t3d8j9HAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t3d-8j-9HA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "t3d-8j-9HA.placeholder"
        }

        return NSLocalizedString("t3d-8j-9HA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func z4PTFIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("18Z-4P-tFI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "18Z-4P-tFI.text"
        }

        return NSLocalizedString("18Z-4P-tFI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Activity Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func pi0Ky2mAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PI0-ky-2mA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PI0-ky-2mA.placeholder"
        }

        return NSLocalizedString("PI0-ky-2mA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Activity Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func v5bSfIqAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v5b-Sf-IqA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v5b-Sf-IqA.text"
        }

        return NSLocalizedString("v5b-Sf-IqA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Activity
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sjLDDCVxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SjL-DD-cVx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SjL-DD-cVx.text"
        }

        return NSLocalizedString("SjL-DD-cVx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func s5wApJZrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S5w-Ap-JZr.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "S5w-Ap-JZr.normalTitle"
        }

        return NSLocalizedString("S5w-Ap-JZr.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Images
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qcZmKjeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Qc-Zm-Kje.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5Qc-Zm-Kje.text"
        }

        return NSLocalizedString("5Qc-Zm-Kje.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Images
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func t5ZZyQs1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t5Z-zy-qs1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "t5Z-zy-qs1.text"
        }

        return NSLocalizedString("t5Z-zy-qs1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hMHQLXrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8hM-hQ-LXr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8hM-hQ-LXr.text"
        }

        return NSLocalizedString("8hM-hQ-LXr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func pYk7HJwgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PYk-7H-jwg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PYk-7H-jwg.text"
        }

        return NSLocalizedString("PYk-7H-jwg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address Bar
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cGPDt0A9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cGP-dt-0A9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cGP-dt-0A9.text"
        }

        return NSLocalizedString("cGP-dt-0A9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account? Sign In
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func iIxFhB7TNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IIx-Fh-b7T.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IIx-Fh-b7T.normalTitle"
        }

        return NSLocalizedString("IIx-Fh-b7T.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Block
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func v0J6SNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("967-v0-J6S.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "967-v0-J6S.normalTitle"
        }

        return NSLocalizedString("967-v0-J6S.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func kHj0F1D4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KHj-0F-1D4.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KHj-0F-1D4.normalTitle"
        }

        return NSLocalizedString("KHj-0F-1D4.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func mZDaS3BNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6mZ-da-s3B.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6mZ-da-s3B.normalTitle"
        }

        return NSLocalizedString("6mZ-da-s3B.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wrjIuUc3ConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WRJ-iu-uc3.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WRJ-iu-uc3.configuration.title"
        }

        return NSLocalizedString("WRJ-iu-uc3.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wrjIuUc3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WRJ-iu-uc3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WRJ-iu-uc3.normalTitle"
        }

        return NSLocalizedString("WRJ-iu-uc3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func uAQXEGQwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uAQ-xE-gQw.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uAQ-xE-gQw.normalTitle"
        }

        return NSLocalizedString("uAQ-xE-gQw.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func l2U9ViText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("73L-2U-9Vi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "73L-2U-9Vi.text"
        }

        return NSLocalizedString("73L-2U-9Vi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func mkfckJspText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MKF-cK-Jsp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MKF-cK-Jsp.text"
        }

        return NSLocalizedString("MKF-cK-Jsp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func uMvKeA7GNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UMv-ke-A7G.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UMv-ke-A7G.normalTitle"
        }

        return NSLocalizedString("UMv-ke-A7G.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func z2CXVWiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4z2-cX-VWi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4z2-cX-VWi.text"
        }

        return NSLocalizedString("4z2-cX-VWi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func z8hYBBNlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z8h-yB-BNl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "z8h-yB-BNl.text"
        }

        return NSLocalizedString("z8h-yB-BNl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func dnJQcI5bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DnJ-Qc-I5b.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DnJ-Qc-I5b.normalTitle"
        }

        return NSLocalizedString("DnJ-Qc-I5b.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cCn89WT8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCn-89-WT8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CCn-89-WT8.text"
        }

        return NSLocalizedString("CCn-89-WT8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hwvC7PZaTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hwv-c7-pZa.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hwv-c7-pZa.title"
        }

        return NSLocalizedString("hwv-c7-pZa.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Chinese
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tj2Md7y5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tj2-Md-7y5.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Tj2-Md-7y5.normalTitle"
        }

        return NSLocalizedString("Tj2-Md-7y5.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func nGgMkBybPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NGg-Mk-byb.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NGg-Mk-byb.placeholder"
        }

        return NSLocalizedString("NGg-Mk-byb.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tDeQjIHXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tDe-qj-iHX.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tDe-qj-iHX.placeholder"
        }

        return NSLocalizedString("tDe-qj-iHX.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func i7oHWNEgPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i7o-hW-nEg.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "i7o-hW-nEg.placeholder"
        }

        return NSLocalizedString("i7o-hW-nEg.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wxc5JVq5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wxc-5J-vq5.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wxc-5J-vq5.placeholder"
        }

        return NSLocalizedString("wxc-5J-vq5.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Seller
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func mqpjzpmdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MQP-JZ-PMD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MQP-JZ-PMD.text"
        }

        return NSLocalizedString("MQP-JZ-PMD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func jIiTqRBPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JIi-tq-rBP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JIi-tq-rBP.text"
        }

        return NSLocalizedString("JIi-tq-rBP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Continue with google
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func zp90fJ0jNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZP9-0f-j0j.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZP9-0f-j0j.normalTitle"
        }

        return NSLocalizedString("ZP9-0f-j0j.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Create new account
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func nupSbKDuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nup-sb-kDu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nup-sb-kDu.text"
        }

        return NSLocalizedString("Nup-sb-kDu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func fTDOVA6rNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fTD-OV-A6r.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fTD-OV-A6r.normalTitle"
        }

        return NSLocalizedString("fTD-OV-A6r.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ix3tErKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Ix-3t-ErK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0Ix-3t-ErK.text"
        }

        return NSLocalizedString("0Ix-3t-ErK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func bRSDsbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("30b-RS-Dsb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "30b-RS-Dsb.text"
        }

        return NSLocalizedString("30b-RS-Dsb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func c5JPeHAyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c5J-Pe-HAy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c5J-Pe-HAy.text"
        }

        return NSLocalizedString("c5J-Pe-HAy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func e7zWy1BoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e7z-wy-1Bo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e7z-wy-1Bo.text"
        }

        return NSLocalizedString("e7z-wy-1Bo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ffLEcCwgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ffL-ec-Cwg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ffL-ec-Cwg.text"
        }

        return NSLocalizedString("ffL-ec-Cwg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hPyMAQaLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hPy-mA-QaL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hPy-mA-QaL.text"
        }

        return NSLocalizedString("hPy-mA-QaL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func jXxLxQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("21J-xx-LxQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "21J-xx-LxQ.text"
        }

        return NSLocalizedString("21J-xx-LxQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func p7UUL99WPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P7U-UL-99W.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "P7U-UL-99W.placeholder"
        }

        return NSLocalizedString("P7U-UL-99W.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func pdPEmFD2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pdP-Em-fD2.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pdP-Em-fD2.placeholder"
        }

        return NSLocalizedString("pdP-Em-fD2.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tH4Re2UzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tH4-re-2Uz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tH4-re-2Uz.text"
        }

        return NSLocalizedString("tH4-re-2Uz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tjI7vZ2rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TjI-7v-Z2r.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TjI-7v-Z2r.text"
        }

        return NSLocalizedString("TjI-7v-Z2r.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Don't have an account? Sign Up
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rCAW2JiNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rCA-W2-jiN.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rCA-W2-jiN.normalTitle"
        }

        return NSLocalizedString("rCA-W2-jiN.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qbIGL3hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8qb-iG-L3h.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8qb-iG-L3h.text"
        }

        return NSLocalizedString("8qb-iG-L3h.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ag1MzR0cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ag1-Mz-r0c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ag1-Mz-r0c.text"
        }

        return NSLocalizedString("ag1-Mz-r0c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func agFELF0YPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AgF-EL-F0Y.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AgF-EL-F0Y.placeholder"
        }

        return NSLocalizedString("AgF-EL-F0Y.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func iRyB5W7VPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iRy-B5-w7V.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iRy-B5-w7V.placeholder"
        }

        return NSLocalizedString("iRy-B5-w7V.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func pvcA16vzPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pvc-A1-6vz.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Pvc-A1-6vz.placeholder"
        }

        return NSLocalizedString("Pvc-A1-6vz.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sb9PcO5oPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SB9-pc-o5o.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SB9-pc-o5o.placeholder"
        }

        return NSLocalizedString("SB9-pc-o5o.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tXtVeXUFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TXt-Ve-XUF.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TXt-Ve-XUF.placeholder"
        }

        return NSLocalizedString("TXt-Ve-XUF.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func y9BZqQSmPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y9B-zq-qSm.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y9B-zq-qSm.placeholder"
        }

        return NSLocalizedString("Y9B-zq-qSm.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func r44TKOEBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r44-TK-oEB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r44-TK-oEB.normalTitle"
        }

        return NSLocalizedString("r44-TK-oEB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Radius (Range in miles)
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func a6uF0cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("48A-6u-f0c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "48A-6u-f0c.text"
        }

        return NSLocalizedString("48A-6u-f0c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Radius (Range in miles)
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cknrnDxjPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CKN-rN-dxj.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CKN-rN-dxj.placeholder"
        }

        return NSLocalizedString("CKN-rN-dxj.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter card number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func t3XTkKKcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t3X-Tk-KKc.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "t3X-Tk-KKc.placeholder"
        }

        return NSLocalizedString("t3X-Tk-KKc.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter expiry date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func elqGosPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("04E-LQ-gos.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "04E-LQ-gos.placeholder"
        }

        return NSLocalizedString("04E-LQ-gos.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter name on card
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cehG1JQaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ceh-g1-JQa.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ceh-g1-JQa.placeholder"
        }

        return NSLocalizedString("ceh-g1-JQa.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter security code
      ///
      /// Locales: fr, es, ru, de, ko, pt-PT, zh-Hant, ja, en
      static func xIXXECIYPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xIX-XE-cIY.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xIX-XE-cIY.placeholder"
        }

        return NSLocalizedString("xIX-XE-cIY.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wuUlEUoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9wu-Ul-EUo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9wu-Ul-EUo.text"
        }

        return NSLocalizedString("9wu-Ul-EUo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Everyone
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func etL7tFhtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EtL-7t-fht.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EtL-7t-fht.normalTitle"
        }

        return NSLocalizedString("EtL-7t-fht.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Expiry Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rSpDDPdhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RSp-dD-pdh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RSp-dD-pdh.text"
        }

        return NSLocalizedString("RSp-dD-pdh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qPYGkN6tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qPY-gk-N6t.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qPY-gk-N6t.text"
        }

        return NSLocalizedString("qPY-gk-N6t.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Feedback*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func uAgQoN7tPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UAg-qo-N7t.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UAg-qo-N7t.placeholder"
        }

        return NSLocalizedString("UAg-qo-N7t.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func g8b0b6YbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("G8b-0b-6Yb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "G8b-0b-6Yb.normalTitle"
        }

        return NSLocalizedString("G8b-0b-6Yb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Find Buddy
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func fzKXRYzETitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FzK-XR-yzE.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FzK-XR-yzE.title"
        }

        return NSLocalizedString("FzK-XR-yzE.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func h2VGFCzsPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h2V-gF-Czs.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h2V-gF-Czs.placeholder"
        }

        return NSLocalizedString("h2V-gF-Czs.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ztZ3MNPXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ztZ-3M-nPX.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ztZ-3M-nPX.placeholder"
        }

        return NSLocalizedString("ztZ-3M-nPX.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: fr, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func okY6pV6mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("okY-6p-v6m.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "okY-6p-v6m.text"
        }

        return NSLocalizedString("okY-6p-v6m.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Fit Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func f7OPcGl8Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f7O-Pc-Gl8.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f7O-Pc-Gl8.title"
        }

        return NSLocalizedString("f7O-Pc-Gl8.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Fit Market
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func plr45GATitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8PL-R4-5GA.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8PL-R4-5GA.title"
        }

        return NSLocalizedString("8PL-R4-5GA.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wauFr3tnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wau-fr-3tn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Wau-fr-3tn.text"
        }

        return NSLocalizedString("Wau-fr-3tn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func svGyF5PNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4SV-Gy-f5P.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4SV-Gy-f5P.normalTitle"
        }

        return NSLocalizedString("4SV-Gy-f5P.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: French
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tzIJFLSINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TzI-jF-lSI.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TzI-jF-lSI.normalTitle"
        }

        return NSLocalizedString("TzI-jF-lSI.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func bwnPoLHCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BWN-Po-LHC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BWN-Po-LHC.text"
        }

        return NSLocalizedString("BWN-Po-LHC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func f5VIe4hCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f5V-ie-4hC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f5V-ie-4hC.text"
        }

        return NSLocalizedString("f5V-ie-4hC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rlsHlFY0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rls-Hl-FY0.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rls-Hl-FY0.normalTitle"
        }

        return NSLocalizedString("Rls-Hl-FY0.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func xwWFPXHHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xwW-fP-xHH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xwW-fP-xHH.text"
        }

        return NSLocalizedString("xwW-fP-xHH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: From Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func h8iL2NuLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h8i-L2-nuL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h8i-L2-nuL.text"
        }

        return NSLocalizedString("h8i-L2-nuL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: From Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func uYXRnGYcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uYX-Rn-gYc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uYX-Rn-gYc.normalTitle"
        }

        return NSLocalizedString("uYX-Rn-gYc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: German
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func yvmGCNSGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yvm-gC-NSG.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Yvm-gC-NSG.normalTitle"
        }

        return NSLocalizedString("Yvm-gC-NSG.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Get Started with FMWB Pro
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wLjVSQwvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wLj-vS-Qwv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wLj-vS-Qwv.text"
        }

        return NSLocalizedString("wLj-vS-Qwv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: I Agree, Continue
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lda8eCL2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lda-8e-CL2.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lda-8e-CL2.normalTitle"
        }

        return NSLocalizedString("lda-8e-CL2.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Invite
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tVXUIN7hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tVX-UI-n7h.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tVX-UI-n7h.normalTitle"
        }

        return NSLocalizedString("tVX-UI-n7h.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Italian
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func htvKjBYxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("htv-Kj-bYx.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "htv-Kj-bYx.normalTitle"
        }

        return NSLocalizedString("htv-Kj-bYx.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Japanese
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func oaxM1KVNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oax-M1-kVN.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Oax-M1-kVN.normalTitle"
        }

        return NSLocalizedString("Oax-M1-kVN.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Journal Activity
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func othG8DlsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oth-G8-dls.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "oth-G8-dls.text"
        }

        return NSLocalizedString("oth-G8-dls.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Korean
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func vwZzDd9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4VW-Zz-Dd9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4VW-Zz-Dd9.normalTitle"
        }

        return NSLocalizedString("4VW-Zz-Dd9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Kundan
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func mZlIz5l2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MZl-iz-5l2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MZl-iz-5l2.text"
        }

        return NSLocalizedString("MZl-iz-5l2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func j19FGH4pNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J19-FG-h4p.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J19-FG-h4p.normalTitle"
        }

        return NSLocalizedString("J19-FG-h4p.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func aYuPSPEYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aYu-PS-PEY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aYu-PS-PEY.text"
        }

        return NSLocalizedString("aYu-PS-PEY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func mRaIAReEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mRa-iA-reE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mRa-iA-reE.text"
        }

        return NSLocalizedString("mRa-iA-reE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func me7RYXyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4me-7R-yXy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4me-7R-yXy.text"
        }

        return NSLocalizedString("4me-7R-yXy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func q0iNiWfIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q0i-Ni-WfI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q0i-Ni-WfI.text"
        }

        return NSLocalizedString("Q0i-Ni-WfI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sd0E2RnyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd0-e2-rny.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sd0-e2-rny.text"
        }

        return NSLocalizedString("sd0-e2-rny.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func t9OEHSMiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T9O-eH-sMi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "T9O-eH-sMi.text"
        }

        return NSLocalizedString("T9O-eH-sMi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wfEKwD8VText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wfE-kw-d8V.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wfE-kw-d8V.text"
        }

        return NSLocalizedString("wfE-kw-d8V.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func yRgHjYDsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yRg-hj-YDs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yRg-hj-YDs.text"
        }

        return NSLocalizedString("yRg-hj-YDs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func eUpZj0WXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eUp-zj-0WX.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eUp-zj-0WX.placeholder"
        }

        return NSLocalizedString("eUp-zj-0WX.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func faoYlIwRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fao-Yl-IwR.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Fao-Yl-IwR.placeholder"
        }

        return NSLocalizedString("Fao-Yl-IwR.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func w0y4fHOdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W0y-4f-HOd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "W0y-4f-HOd.text"
        }

        return NSLocalizedString("W0y-4f-HOd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: List
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rve7YD1eNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RVE-7Y-d1e.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RVE-7Y-d1e.normalTitle"
        }

        return NSLocalizedString("RVE-7Y-d1e.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ctbaxhvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6CT-bA-XHV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6CT-bA-XHV.text"
        }

        return NSLocalizedString("6CT-bA-XHV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func fkM7gNfcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fkM-7g-nfc.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fkM-7g-nfc.placeholder"
        }

        return NSLocalizedString("fkM-7g-nfc.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func khtkxYdlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KHT-KX-ydl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KHT-KX-ydl.text"
        }

        return NSLocalizedString("KHT-KX-ydl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lLjSfNoAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LLj-sf-noA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LLj-sf-noA.placeholder"
        }

        return NSLocalizedString("LLj-sf-noA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ywCI54PJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YwC-I5-4PJ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YwC-I5-4PJ.placeholder"
        }

        return NSLocalizedString("YwC-I5-4PJ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location Zip Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func dkIWq2g8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dkI-Wq-2g8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dkI-Wq-2g8.text"
        }

        return NSLocalizedString("dkI-Wq-2g8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Location Zip Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ynxwzCcHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YNX-wZ-ccH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YNX-wZ-ccH.placeholder"
        }

        return NSLocalizedString("YNX-wZ-ccH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Login to your account
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func eJbXN1iTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EJb-XN-1iT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EJb-XN-1iT.text"
        }

        return NSLocalizedString("EJb-XN-1iT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Map
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func bc1UJExINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bc1-uJ-exI.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bc1-uJ-exI.normalTitle"
        }

        return NSLocalizedString("bc1-uJ-exI.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hSTAMLXaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hST-aM-lXa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hST-aM-lXa.normalTitle"
        }

        return NSLocalizedString("hST-aM-lXa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tBH553Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("28t-BH-553.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "28t-BH-553.placeholder"
        }

        return NSLocalizedString("28t-BH-553.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tMUCzGPrPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tMU-Cz-GPr.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tMU-Cz-GPr.placeholder"
        }

        return NSLocalizedString("tMU-Cz-GPr.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func uGpKpXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("75U-Gp-KpX.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "75U-Gp-KpX.placeholder"
        }

        return NSLocalizedString("75U-Gp-KpX.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Mobile Number
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func vC3R3EeLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vC3-R3-eeL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vC3-R3-eeL.text"
        }

        return NSLocalizedString("vC3-R3-eeL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Buddies
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func nqxPe0efNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nqx-Pe-0ef.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nqx-Pe-0ef.normalTitle"
        }

        return NSLocalizedString("nqx-Pe-0ef.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Feed
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func z6BDbT4vText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z6B-db-T4v.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "z6B-db-T4v.text"
        }

        return NSLocalizedString("z6B-db-T4v.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: My Items
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rd15KPoeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rd1-5K-Poe.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rd1-5K-Poe.normalTitle"
        }

        return NSLocalizedString("Rd1-5K-Poe.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name On Card
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wqDQPGVFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WqD-QP-gVF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WqD-QP-gVF.text"
        }

        return NSLocalizedString("WqD-QP-gVF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name change can only be changed once every six months.
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sMuMoeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("86S-Mu-moe.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "86S-Mu-moe.text"
        }

        return NSLocalizedString("86S-Mu-moe.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func izl3y1wdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IZL-3y-1wd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IZL-3y-1wd.placeholder"
        }

        return NSLocalizedString("IZL-3y-1wd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name*
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func xzIRyQlZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XzI-Ry-qlZ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XzI-Ry-qlZ.placeholder"
        }

        return NSLocalizedString("XzI-Ry-qlZ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lrxoq5dAPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LRX-OQ-5dA.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LRX-OQ-5dA.placeholder"
        }

        return NSLocalizedString("LRX-OQ-5dA.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Notification Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func xkyJmU7EText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xky-Jm-u7E.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xky-Jm-u7E.text"
        }

        return NSLocalizedString("Xky-Jm-u7E.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sEyJQOHJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sEy-jQ-OHJ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sEy-jQ-OHJ.placeholder"
        }

        return NSLocalizedString("sEy-jQ-OHJ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: POST
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func dkIVAczNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Dk-iV-acz.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9Dk-iV-acz.normalTitle"
        }

        return NSLocalizedString("9Dk-iV-acz.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: POST
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func vqHrTjbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1VQ-hr-tjb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1VQ-hr-tjb.normalTitle"
        }

        return NSLocalizedString("1VQ-hr-tjb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cfXLW7HHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CfX-lW-7HH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CfX-lW-7HH.placeholder"
        }

        return NSLocalizedString("CfX-lW-7HH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hiG0TkfPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2hi-G0-Tkf.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2hi-G0-Tkf.placeholder"
        }

        return NSLocalizedString("2hi-G0-Tkf.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Payment Amount
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func oeweCdXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1OE-WE-CdX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1OE-WE-CdX.text"
        }

        return NSLocalizedString("1OE-WE-CdX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Photos
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func kdLZ9NIxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kdL-Z9-nIx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kdL-Z9-nIx.text"
        }

        return NSLocalizedString("kdL-Z9-nIx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Portuguese
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lu5CnBQbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lu5-Cn-BQb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lu5-Cn-BQb.normalTitle"
        }

        return NSLocalizedString("Lu5-Cn-BQb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Posts
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wMeBFIdsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wMe-BF-ids.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wMe-BF-ids.text"
        }

        return NSLocalizedString("wMe-BF-ids.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Posts
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func xopPROsRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xop-PR-osR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xop-PR-osR.text"
        }

        return NSLocalizedString("Xop-PR-osR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Detail
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ppBXITLdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ppB-XI-TLd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ppB-XI-TLd.text"
        }

        return NSLocalizedString("ppB-XI-TLd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Price
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ea1JsLwwPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EA1-js-Lww.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EA1-js-Lww.placeholder"
        }

        return NSLocalizedString("EA1-js-Lww.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Price
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func vzHIEJ4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Vz-HI-EJ4.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6Vz-HI-EJ4.text"
        }

        return NSLocalizedString("6Vz-HI-EJ4.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, en
      static func km3ON2ouTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("km3-oN-2ou.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "km3-oN-2ou.title"
        }

        return NSLocalizedString("km3-oN-2ou.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func eD8ZcI8wText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eD8-Zc-i8w.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eD8-Zc-i8w.text"
        }

        return NSLocalizedString("eD8-Zc-i8w.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Public Products
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func p6JNTPEbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p6J-NT-PEb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "p6J-NT-PEb.normalTitle"
        }

        return NSLocalizedString("p6J-NT-PEb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: REGISTER
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func vceGERZ4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vce-GE-RZ4.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vce-GE-RZ4.normalTitle"
        }

        return NSLocalizedString("Vce-GE-RZ4.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Refer a Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func chG8cLXBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chG-8c-LXB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "chG-8c-LXB.text"
        }

        return NSLocalizedString("chG-8c-LXB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Refer a Friend
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func n3pY3Ne7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n3p-Y3-ne7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "n3p-Y3-ne7.text"
        }

        return NSLocalizedString("n3p-Y3-ne7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Report
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func o8gLq8CONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o8g-lq-8CO.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o8g-lq-8CO.normalTitle"
        }

        return NSLocalizedString("o8g-lq-8CO.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Requests
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func iCOgX5GNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4iC-og-X5G.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4iC-og-X5G.normalTitle"
        }

        return NSLocalizedString("4iC-og-X5G.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Russian
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cCm1ERrbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCm-1E-rrb.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CCm-1E-rrb.normalTitle"
        }

        return NSLocalizedString("CCm-1E-rrb.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func id3XBMbtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Id3-xB-Mbt.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Id3-xB-Mbt.normalTitle"
        }

        return NSLocalizedString("Id3-xB-Mbt.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func jHgHLWhhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JHg-hL-Whh.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JHg-hL-Whh.normalTitle"
        }

        return NSLocalizedString("JHg-hL-Whh.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func iIBO0RPPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iIB-o0-RPP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iIB-o0-RPP.text"
        }

        return NSLocalizedString("iIB-o0-RPP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Security Code
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func yq2ZVG2FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YQ2-ZV-G2F.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YQ2-ZV-G2F.text"
        }

        return NSLocalizedString("YQ2-ZV-G2F.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Date
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qZlY4LxhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QZl-Y4-lxh.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "QZl-Y4-lxh.normalTitle"
        }

        return NSLocalizedString("QZl-Y4-lxh.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func yuiIvE6xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yui-iv-E6x.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Yui-iv-E6x.text"
        }

        return NSLocalizedString("Yui-iv-E6x.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Who Can See Your Profile?
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func aTxEMERkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ATx-eM-ERk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ATx-eM-ERk.text"
        }

        return NSLocalizedString("ATx-eM-ERk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func gOXN69kzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gOX-n6-9kz.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gOX-n6-9kz.normalTitle"
        }

        return NSLocalizedString("gOX-n6-9kz.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hXYMk2YKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hXY-Mk-2YK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hXY-Mk-2YK.normalTitle"
        }

        return NSLocalizedString("hXY-Mk-2YK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func oQnEFTbeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OQn-eF-tbe.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OQn-eF-tbe.normalTitle"
        }

        return NSLocalizedString("OQn-eF-tbe.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send Feedback
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func giiupfQpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GII-uP-FQp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GII-uP-FQp.text"
        }

        return NSLocalizedString("GII-uP-FQp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send message...
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func p5KIVVQ2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P5K-IV-vQ2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "P5K-IV-vQ2.text"
        }

        return NSLocalizedString("P5K-IV-vQ2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send message...
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qUkP6NOgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qUk-p6-NOg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qUk-p6-NOg.text"
        }

        return NSLocalizedString("qUk-p6-NOg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lXGHz845Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lXG-Hz-845.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lXG-Hz-845.text"
        }

        return NSLocalizedString("lXG-Hz-845.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Share my location to other users
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func dk3XrMzuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DK3-Xr-Mzu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DK3-Xr-Mzu.text"
        }

        return NSLocalizedString("DK3-Xr-Mzu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Apple
      ///
      /// Locales: fr, es, ru, de, it, pt-PT, zh-Hant, ja, en
      static func iuBHnOdKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IuB-hn-OdK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IuB-hn-OdK.normalTitle"
        }

        return NSLocalizedString("IuB-hn-OdK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func aZR9MJUvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aZR-9M-JUv.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aZR-9M-JUv.normalTitle"
        }

        return NSLocalizedString("aZR-9M-JUv.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Spanish
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cNZf7o7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2cN-zf-7o7.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2cN-zf-7o7.normalTitle"
        }

        return NSLocalizedString("2cN-zf-7o7.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func o2UAcXUaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O2U-Ac-xUa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "O2U-Ac-xUa.normalTitle"
        }

        return NSLocalizedString("O2U-Ac-xUa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qsQpLnkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Qs-qp-lnk.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0Qs-qp-lnk.normalTitle"
        }

        return NSLocalizedString("0Qs-qp-lnk.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func dly4h3DKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DLY-4h-3DK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DLY-4h-3DK.normalTitle"
        }

        return NSLocalizedString("DLY-4h-3DK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe to the following plans below to further enjoy what the app has to offer
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func b92YwZjCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b92-yw-zjC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b92-yw-zjC.text"
        }

        return NSLocalizedString("b92-yw-zjC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subscription
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rn1Q4YEYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rn1-q4-yEY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rn1-q4-yEY.text"
        }

        return NSLocalizedString("rn1-q4-yEY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func cKpG3EnPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CKp-g3-enP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CKp-g3-enP.text"
        }

        return NSLocalizedString("CKp-g3-enP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func gVLwWkpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7gV-lw-Wkp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7gV-lw-Wkp.text"
        }

        return NSLocalizedString("7gV-lw-Wkp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func gqd4fSQLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gqd-4f-SQL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gqd-4f-SQL.text"
        }

        return NSLocalizedString("Gqd-4f-SQL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func robNOTJbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rob-NO-tJb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rob-NO-tJb.text"
        }

        return NSLocalizedString("Rob-NO-tJb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test 
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func wb4XeNLTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wb4-xe-nLT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wb4-xe-nLT.text"
        }

        return NSLocalizedString("wb4-xe-nLT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func lJdVAVscText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LJd-VA-vsc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LJd-VA-vsc.text"
        }

        return NSLocalizedString("LJd-VA-vsc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func tVJDw6evPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tVJ-Dw-6ev.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tVJ-Dw-6ev.placeholder"
        }

        return NSLocalizedString("tVJ-Dw-6ev.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: To Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func hWtNUUMFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hWt-NU-UMF.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hWt-NU-UMF.normalTitle"
        }

        return NSLocalizedString("hWt-NU-UMF.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: To Time
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func o8uWe2R8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o8u-we-2R8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o8u-we-2R8.text"
        }

        return NSLocalizedString("o8u-we-2R8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func a9TOBVsfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A9T-oB-vsf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "A9T-oB-vsf.normalTitle"
        }

        return NSLocalizedString("A9T-oB-vsf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UPLOAD PHOTOS
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rJAFiX43NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rJA-Fi-X43.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rJA-Fi-X43.normalTitle"
        }

        return NSLocalizedString("rJA-Fi-X43.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func naXOQTQEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NaX-OQ-TQE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NaX-OQ-TQE.text"
        }

        return NSLocalizedString("NaX-OQ-TQE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: When you become a paid menber. 50% off the next month.
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rc8P2JQkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rc8-p2-JQk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rc8-p2-JQk.text"
        }

        return NSLocalizedString("rc8-p2-JQk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Write a post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func ondHfYpwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OND-hf-ypw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OND-hf-ypw.text"
        }

        return NSLocalizedString("OND-hf-ypw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Write a post
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func qPn0uNDJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qPn-0u-nDJ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qPn-0u-nDJ.placeholder"
        }

        return NSLocalizedString("qPn-0u-nDJ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Zip/Postal Code Address
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func aJSYIG7BPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aJS-YI-G7B.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aJS-YI-G7B.placeholder"
        }

        return NSLocalizedString("aJS-YI-G7B.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Zip/Postal Code Address
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func sRaOL9GTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SRa-oL-9GT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SRa-oL-9GT.text"
        }

        return NSLocalizedString("SRa-oL-9GT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: dfds
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func gTiDXNzfTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GTi-dX-Nzf.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GTi-dX-Nzf.title"
        }

        return NSLocalizedString("GTi-dX-Nzf.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ldsf sdfads
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func kd4PUIEEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kd4-PU-IEE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kd4-PU-IEE.text"
        }

        return NSLocalizedString("Kd4-PU-IEE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ldsf sdfads
      ///
      /// Locales: fr, es, ru, de, ko, it, pt-PT, zh-Hant, ja, en
      static func rvtJwLY0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rvt-Jw-lY0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rvt-Jw-lY0.text"
        }

        return NSLocalizedString("rvt-Jw-lY0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BlockUserCell.validate()
      try _ChatListCell.validate()
      try _FeedImageCell.validate()
      try _FeedPostCell.validate()
      try _FindBuddyListCell.validate()
      try _JournalActivityCell.validate()
      try _LandingCell.validate()
      try _LeftSideMenuCell.validate()
      try _MyFeedCell.validate()
      try _MyFriendsCell.validate()
      try _MyItemsCell.validate()
      try _NewRequestCell.validate()
      try _NotificationCell.validate()
      try _PlanCell.validate()
      try _PrimaryCell.validate()
      try _ReportUserCell.validate()
      try _SettingsCell.validate()
    }

    struct _BlockUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BlockUserCell

      let bundle = R.hostingBundle
      let identifier = "BlockUserCell"
      let name = "BlockUserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockUserCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dummy_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dummy_user' is used in nib 'BlockUserCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'BlockUserCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChatListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatListCell

      let bundle = R.hostingBundle
      let identifier = "ChatListCell"
      let name = "ChatListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in nib 'ChatListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FeedImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FeedImageCell

      let bundle = R.hostingBundle
      let identifier = "FeedImageCell"
      let name = "FeedImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in nib 'FeedImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FeedPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FeedPostCell

      let bundle = R.hostingBundle
      let identifier = "FeedPostCell"
      let name = "FeedPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'block' is used in nib 'FeedPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'comment' is used in nib 'FeedPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in nib 'FeedPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unlike", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unlike' is used in nib 'FeedPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FindBuddyListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FindBuddyListCell

      let bundle = R.hostingBundle
      let identifier = "FindBuddyListCell"
      let name = "FindBuddyListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindBuddyListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindBuddyListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in nib 'FindBuddyListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendmessage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendmessage' is used in nib 'FindBuddyListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageCell

      let bundle = R.hostingBundle
      let identifier = "ImageCell"
      let name = "ImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
      }

      fileprivate init() {}
    }

    struct _JournalActivityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JournalActivityCell

      let bundle = R.hostingBundle
      let identifier = "JournalActivityCell"
      let name = "JournalActivityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JournalActivityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JournalActivityCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "remove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'remove' is used in nib 'JournalActivityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LandingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LandingCell

      let bundle = R.hostingBundle
      let identifier = "LandingCell"
      let name = "LandingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "slide_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slide_1' is used in nib 'LandingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LeftSideMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LeftSideMenuCell

      let bundle = R.hostingBundle
      let identifier = "LeftSideMenuCell"
      let name = "LeftSideMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftSideMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftSideMenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "myfeed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myfeed' is used in nib 'LeftSideMenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MyFeedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyFeedCell

      let bundle = R.hostingBundle
      let identifier = "MyFeedCell"
      let name = "MyFeedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFeedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFeedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "David", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'David' is used in nib 'MyFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'comment' is used in nib 'MyFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dots' is used in nib 'MyFeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unlike", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unlike' is used in nib 'MyFeedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in nib 'MyFeedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyFriendsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyFriendsCell

      let bundle = R.hostingBundle
      let identifier = "MyFriendsCell"
      let name = "MyFriendsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyFriendsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFriendsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "David", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'David' is used in nib 'MyFriendsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'MyFriendsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyItemsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyItemsCell

      let bundle = R.hostingBundle
      let identifier = "MyItemsCell"
      let name = "MyItemsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyItemsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyItemsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dots' is used in nib 'MyItemsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in nib 'MyItemsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NewRequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewRequestCell

      let bundle = R.hostingBundle
      let identifier = "NewRequestCell"
      let name = "NewRequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewRequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dummy_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dummy_user' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationCell

      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "remove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'remove' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlanCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlanCell

      let bundle = R.hostingBundle
      let identifier = "PlanCell"
      let name = "PlanCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlanCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlanCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "radio_unchecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_unchecked' is used in nib 'PlanCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "green_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_color' is used in nib 'PlanCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PrimaryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PrimaryCell

      let bundle = R.hostingBundle
      let identifier = "PrimaryCell"
      let name = "PrimaryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrimaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrimaryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "slide_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slide_1' is used in nib 'PrimaryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PublicProductsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PublicProductsCell

      let bundle = R.hostingBundle
      let identifier = "PublicProductsCell"
      let name = "PublicProductsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PublicProductsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PublicProductsCell
      }

      fileprivate init() {}
    }

    struct _ReportUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReportUserCell

      let bundle = R.hostingBundle
      let identifier = "ReportUserCell"
      let name = "ReportUserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportUserCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dummy_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dummy_user' is used in nib 'ReportUserCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SettingsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingsCell

      let bundle = R.hostingBundle
      let identifier = "SettingsCell"
      let name = "SettingsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "green_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_color' is used in nib 'SettingsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let aaViewController = StoryboardViewControllerResource<aaViewController>(identifier: "aaViewController")
      let aboutUsVC = StoryboardViewControllerResource<AboutUsVC>(identifier: "AboutUsVC")
      let addActivityVC = StoryboardViewControllerResource<AddActivityVC>(identifier: "AddActivityVC")
      let addNewPostVC = StoryboardViewControllerResource<AddNewPostVC>(identifier: "AddNewPostVC")
      let addProductVC = StoryboardViewControllerResource<AddProductVC>(identifier: "AddProductVC")
      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let blockedUserVC = StoryboardViewControllerResource<BlockedUserVC>(identifier: "BlockedUserVC")
      let bundle = R.hostingBundle
      let changeLanguageVC = StoryboardViewControllerResource<ChangeLanguageVC>(identifier: "ChangeLanguageVC")
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let commentsVC = StoryboardViewControllerResource<CommentsVC>(identifier: "CommentsVC")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let eulavC = StoryboardViewControllerResource<EULAVC>(identifier: "EULAVC")
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let findBuddyListVC = StoryboardViewControllerResource<FindBuddyListVC>(identifier: "FindBuddyListVC")
      let findBuddyMainVC = StoryboardViewControllerResource<FindBuddyMainVC>(identifier: "FindBuddyMainVC")
      let findBuddyMapVC = StoryboardViewControllerResource<FindBuddyMapVC>(identifier: "FindBuddyMapVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let friendsListVC = StoryboardViewControllerResource<FriendsListVC>(identifier: "FriendsListVC")
      let friendsMainVC = StoryboardViewControllerResource<FriendsMainVC>(identifier: "FriendsMainVC")
      let homeMainVC = StoryboardViewControllerResource<HomeMainVC>(identifier: "HomeMainVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let imageVC = StoryboardViewControllerResource<ImageVC>(identifier: "ImageVC")
      let journalActivityVC = StoryboardViewControllerResource<JournalActivityVC>(identifier: "JournalActivityVC")
      let leftSideMenuVC = StoryboardViewControllerResource<LeftSideMenuVC>(identifier: "LeftSideMenuVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let markerDetailVC = StoryboardViewControllerResource<MarkerDetailVC>(identifier: "MarkerDetailVC")
      let myFeedVC = StoryboardViewControllerResource<MyFeedVC>(identifier: "MyFeedVC")
      let myItemsVC = StoryboardViewControllerResource<MyItemsVC>(identifier: "MyItemsVC")
      let name = "Main"
      let newRequestVC = StoryboardViewControllerResource<NewRequestVC>(identifier: "NewRequestVC")
      let notificationDetailVC = StoryboardViewControllerResource<NotificationDetailVC>(identifier: "NotificationDetailVC")
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let primaryMainVC = StoryboardViewControllerResource<PrimaryMainVC>(identifier: "PrimaryMainVC")
      let privacyPolicyVC = StoryboardViewControllerResource<PrivacyPolicyVC>(identifier: "PrivacyPolicyVC")
      let productDetailVC = StoryboardViewControllerResource<ProductDetailVC>(identifier: "ProductDetailVC")
      let productMainVC = StoryboardViewControllerResource<ProductMainVC>(identifier: "ProductMainVC")
      let publicProductListVC = StoryboardViewControllerResource<PublicProductListVC>(identifier: "PublicProductListVC")
      let referFriendVC = StoryboardViewControllerResource<ReferFriendVC>(identifier: "ReferFriendVC")
      let reportUserVC = StoryboardViewControllerResource<ReportUserVC>(identifier: "ReportUserVC")
      let seeMyProfileVC = StoryboardViewControllerResource<SeeMyProfileVC>(identifier: "SeeMyProfileVC")
      let sendFeedBackVC = StoryboardViewControllerResource<SendFeedBackVC>(identifier: "SendFeedBackVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")
      let subscriptionVC = StoryboardViewControllerResource<SubscriptionVC>(identifier: "SubscriptionVC")
      let termsAndCondVC = StoryboardViewControllerResource<TermsAndCondVC>(identifier: "TermsAndCondVC")
      let termsAndCondsVC = StoryboardViewControllerResource<TermsAndCondsVC>(identifier: "TermsAndCondsVC")
      let uploadPhotosVC = StoryboardViewControllerResource<UploadPhotosVC>(identifier: "UploadPhotosVC")
      let userChatVC = StoryboardViewControllerResource<UserChatVC>(identifier: "UserChatVC")
      let viewProfileVC = StoryboardViewControllerResource<ViewProfileVC>(identifier: "ViewProfileVC")

      func aaViewController(_: Void = ()) -> aaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aaViewController)
      }

      func aboutUsVC(_: Void = ()) -> AboutUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsVC)
      }

      func addActivityVC(_: Void = ()) -> AddActivityVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addActivityVC)
      }

      func addNewPostVC(_: Void = ()) -> AddNewPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewPostVC)
      }

      func addProductVC(_: Void = ()) -> AddProductVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addProductVC)
      }

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func blockedUserVC(_: Void = ()) -> BlockedUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockedUserVC)
      }

      func changeLanguageVC(_: Void = ()) -> ChangeLanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeLanguageVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func commentsVC(_: Void = ()) -> CommentsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentsVC)
      }

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func eulavC(_: Void = ()) -> EULAVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eulavC)
      }

      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }

      func findBuddyListVC(_: Void = ()) -> FindBuddyListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findBuddyListVC)
      }

      func findBuddyMainVC(_: Void = ()) -> FindBuddyMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findBuddyMainVC)
      }

      func findBuddyMapVC(_: Void = ()) -> FindBuddyMapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findBuddyMapVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func friendsListVC(_: Void = ()) -> FriendsListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: friendsListVC)
      }

      func friendsMainVC(_: Void = ()) -> FriendsMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: friendsMainVC)
      }

      func homeMainVC(_: Void = ()) -> HomeMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeMainVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func imageVC(_: Void = ()) -> ImageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageVC)
      }

      func journalActivityVC(_: Void = ()) -> JournalActivityVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: journalActivityVC)
      }

      func leftSideMenuVC(_: Void = ()) -> LeftSideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftSideMenuVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func markerDetailVC(_: Void = ()) -> MarkerDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: markerDetailVC)
      }

      func myFeedVC(_: Void = ()) -> MyFeedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myFeedVC)
      }

      func myItemsVC(_: Void = ()) -> MyItemsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myItemsVC)
      }

      func newRequestVC(_: Void = ()) -> NewRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newRequestVC)
      }

      func notificationDetailVC(_: Void = ()) -> NotificationDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationDetailVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func primaryMainVC(_: Void = ()) -> PrimaryMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: primaryMainVC)
      }

      func privacyPolicyVC(_: Void = ()) -> PrivacyPolicyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyPolicyVC)
      }

      func productDetailVC(_: Void = ()) -> ProductDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailVC)
      }

      func productMainVC(_: Void = ()) -> ProductMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productMainVC)
      }

      func publicProductListVC(_: Void = ()) -> PublicProductListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: publicProductListVC)
      }

      func referFriendVC(_: Void = ()) -> ReferFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referFriendVC)
      }

      func reportUserVC(_: Void = ()) -> ReportUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reportUserVC)
      }

      func seeMyProfileVC(_: Void = ()) -> SeeMyProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: seeMyProfileVC)
      }

      func sendFeedBackVC(_: Void = ()) -> SendFeedBackVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendFeedBackVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      func subscriptionVC(_: Void = ()) -> SubscriptionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionVC)
      }

      func termsAndCondVC(_: Void = ()) -> TermsAndCondVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndCondVC)
      }

      func termsAndCondsVC(_: Void = ()) -> TermsAndCondsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndCondsVC)
      }

      func uploadPhotosVC(_: Void = ()) -> UploadPhotosVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadPhotosVC)
      }

      func userChatVC(_: Void = ()) -> UserChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userChatVC)
      }

      func viewProfileVC(_: Void = ()) -> ViewProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "FMWBBS__online-video-cutter_com___1__AdobeExpress.gif", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FMWBBS__online-video-cutter_com___1__AdobeExpress.gif' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile_Pla", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile_Pla' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Send Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Send Icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'apple' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "black_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'black_cross' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cameraWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancelRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancelRed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "catic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'catic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat_deactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check_box_nill_18pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check_box_nill_18pt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit-card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit-card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dateic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dateic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dots", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dots' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit_new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit_new' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "feed_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'feed_deactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "findbuddy_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'findbuddy_deactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fitmarket_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fitmarket_deactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loc' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_deactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_deactive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_unchecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_unchecked' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "referfriend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'referfriend' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "subscribe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'subscribe' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visa' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Gradiant0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Gradiant0' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Gradiant1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Gradiant1' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SHADOWCOLOR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SHADOWCOLOR' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_color' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().aboutUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsVC' could not be loaded from storyboard 'Main' as 'AboutUsVC'.") }
        if _R.storyboard.main().addActivityVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addActivityVC' could not be loaded from storyboard 'Main' as 'AddActivityVC'.") }
        if _R.storyboard.main().addNewPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewPostVC' could not be loaded from storyboard 'Main' as 'AddNewPostVC'.") }
        if _R.storyboard.main().addProductVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addProductVC' could not be loaded from storyboard 'Main' as 'AddProductVC'.") }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().blockedUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockedUserVC' could not be loaded from storyboard 'Main' as 'BlockedUserVC'.") }
        if _R.storyboard.main().changeLanguageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeLanguageVC' could not be loaded from storyboard 'Main' as 'ChangeLanguageVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Main' as 'ChatVC'.") }
        if _R.storyboard.main().commentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentsVC' could not be loaded from storyboard 'Main' as 'CommentsVC'.") }
        if _R.storyboard.main().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'Main' as 'ContactUsVC'.") }
        if _R.storyboard.main().eulavC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eulavC' could not be loaded from storyboard 'Main' as 'EULAVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'Main' as 'FilterVC'.") }
        if _R.storyboard.main().findBuddyListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findBuddyListVC' could not be loaded from storyboard 'Main' as 'FindBuddyListVC'.") }
        if _R.storyboard.main().findBuddyMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findBuddyMainVC' could not be loaded from storyboard 'Main' as 'FindBuddyMainVC'.") }
        if _R.storyboard.main().findBuddyMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findBuddyMapVC' could not be loaded from storyboard 'Main' as 'FindBuddyMapVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().friendsListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'friendsListVC' could not be loaded from storyboard 'Main' as 'FriendsListVC'.") }
        if _R.storyboard.main().friendsMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'friendsMainVC' could not be loaded from storyboard 'Main' as 'FriendsMainVC'.") }
        if _R.storyboard.main().homeMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeMainVC' could not be loaded from storyboard 'Main' as 'HomeMainVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().imageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageVC' could not be loaded from storyboard 'Main' as 'ImageVC'.") }
        if _R.storyboard.main().journalActivityVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'journalActivityVC' could not be loaded from storyboard 'Main' as 'JournalActivityVC'.") }
        if _R.storyboard.main().leftSideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftSideMenuVC' could not be loaded from storyboard 'Main' as 'LeftSideMenuVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().markerDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'markerDetailVC' could not be loaded from storyboard 'Main' as 'MarkerDetailVC'.") }
        if _R.storyboard.main().myFeedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myFeedVC' could not be loaded from storyboard 'Main' as 'MyFeedVC'.") }
        if _R.storyboard.main().myItemsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myItemsVC' could not be loaded from storyboard 'Main' as 'MyItemsVC'.") }
        if _R.storyboard.main().newRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newRequestVC' could not be loaded from storyboard 'Main' as 'NewRequestVC'.") }
        if _R.storyboard.main().notificationDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationDetailVC' could not be loaded from storyboard 'Main' as 'NotificationDetailVC'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().primaryMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'primaryMainVC' could not be loaded from storyboard 'Main' as 'PrimaryMainVC'.") }
        if _R.storyboard.main().privacyPolicyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyPolicyVC' could not be loaded from storyboard 'Main' as 'PrivacyPolicyVC'.") }
        if _R.storyboard.main().productDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailVC' could not be loaded from storyboard 'Main' as 'ProductDetailVC'.") }
        if _R.storyboard.main().productMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productMainVC' could not be loaded from storyboard 'Main' as 'ProductMainVC'.") }
        if _R.storyboard.main().publicProductListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'publicProductListVC' could not be loaded from storyboard 'Main' as 'PublicProductListVC'.") }
        if _R.storyboard.main().referFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referFriendVC' could not be loaded from storyboard 'Main' as 'ReferFriendVC'.") }
        if _R.storyboard.main().reportUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reportUserVC' could not be loaded from storyboard 'Main' as 'ReportUserVC'.") }
        if _R.storyboard.main().seeMyProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'seeMyProfileVC' could not be loaded from storyboard 'Main' as 'SeeMyProfileVC'.") }
        if _R.storyboard.main().sendFeedBackVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendFeedBackVC' could not be loaded from storyboard 'Main' as 'SendFeedBackVC'.") }
        if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Main' as 'SplashVC'.") }
        if _R.storyboard.main().subscriptionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionVC' could not be loaded from storyboard 'Main' as 'SubscriptionVC'.") }
        if _R.storyboard.main().termsAndCondVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndCondVC' could not be loaded from storyboard 'Main' as 'TermsAndCondVC'.") }
        if _R.storyboard.main().termsAndCondsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndCondsVC' could not be loaded from storyboard 'Main' as 'TermsAndCondsVC'.") }
        if _R.storyboard.main().uploadPhotosVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadPhotosVC' could not be loaded from storyboard 'Main' as 'UploadPhotosVC'.") }
        if _R.storyboard.main().userChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userChatVC' could not be loaded from storyboard 'Main' as 'UserChatVC'.") }
        if _R.storyboard.main().viewProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewProfileVC' could not be loaded from storyboard 'Main' as 'ViewProfileVC'.") }
        if _R.storyboard.main().aaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aaViewController' could not be loaded from storyboard 'Main' as 'aaViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
